
/**
 * @cypress/vue v0.0.0-development
 * (c) 2021 Cypress.io
 * Released under the MIT License
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var testUtils = require('@vue/test-utils');
var mountUtils = require('@cypress/mount-utils');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

var defaultOptions = [
    'vue',
    'extensions',
];
var registerGlobalComponents = function (Vue, options) {
    var globalComponents = Cypress._.get(options, 'extensions.components');
    if (Cypress._.isPlainObject(globalComponents)) {
        Cypress._.forEach(globalComponents, function (component, id) {
            Vue.component(id, component);
        });
    }
};
var installFilters = function (Vue, options) {
    var filters = Cypress._.get(options, 'extensions.filters');
    if (Cypress._.isPlainObject(filters)) {
        Object.keys(filters).forEach(function (name) {
            Vue.filter(name, filters[name]);
        });
    }
};
var installPlugins = function (Vue, options, props) {
    var plugins = Cypress._.get(props, 'plugins') ||
        Cypress._.get(options, 'extensions.use') ||
        Cypress._.get(options, 'extensions.plugins') ||
        [];
    // @ts-ignore
    plugins.forEach(function (p) {
        Array.isArray(p) ? Vue.use.apply(Vue, p) : Vue.use(p);
    });
};
var installMixins = function (Vue, options) {
    var mixins = Cypress._.get(options, 'extensions.mixin') ||
        Cypress._.get(options, 'extensions.mixins');
    if (Cypress._.isArray(mixins)) {
        mixins.forEach(function (mixin) {
            Vue.mixin(mixin);
        });
    }
};
var hasStore = function (_a) {
    var store = _a.store;
    return Boolean(store && store._vm);
};
var forEachValue = function (obj, fn) {
    return Object.keys(obj).forEach(function (key) { return fn(obj[key], key); });
};
var resetStoreVM = function (Vue, _a) {
    var store = _a.store;
    // bind store public getters
    store.getters = {};
    var wrappedGetters = store._wrappedGetters;
    var computed = {};
    forEachValue(wrappedGetters, function (fn, key) {
        // use computed to leverage its lazy-caching mechanism
        computed[key] = function () { return fn(store); };
        Object.defineProperty(store.getters, key, {
            get: function () { return store._vm[key]; },
            enumerable: true, // for local getters
        });
    });
    store._watcherVM = new Vue();
    store._vm = new Vue({
        data: {
            $$state: store._vm._data.$$state,
        },
        computed: computed,
    });
    return store;
};
/**
 * Direct Vue errors to the top error handler
 * where they will fail Cypress test
 * @see https://vuejs.org/v2/api/#errorHandler
 * @see https://github.com/cypress-io/cypress/issues/7910
 */
function failTestOnVueError(err, vm, info) {
    console.error("Vue error");
    console.error(err);
    console.error('component:', vm);
    console.error('info:', info);
    window.top.onerror(err);
}
function registerAutoDestroy($destroy) {
    Cypress.on('test:before:run', function () {
        $destroy();
    });
}
testUtils.enableAutoDestroy(registerAutoDestroy);
var injectStyles = function (options) {
    var el = document.getElementById(mountUtils.ROOT_ID);
    return mountUtils.injectStylesBeforeElement(options, document, el);
};
/**
 * Mounts a Vue component inside Cypress browser.
 * @param {object} component imported from Vue file
 * @example
 *  import Greeting from './Greeting.vue'
 *  import { mount } from '@cypress/vue'
 *  it('works', () => {
 *    // pass props, additional extensions, etc
 *    mount(Greeting, { ... })
 *    // use any Cypress command to test the component
 *    cy.get('#greeting').should('be.visible')
 *  })
 */
var mount = function (component, optionsOrProps) {
    if (optionsOrProps === void 0) { optionsOrProps = {}; }
    var options = Cypress._.pick(optionsOrProps, defaultOptions);
    var props = Cypress._.omit(optionsOrProps, defaultOptions);
    return cy
        .window({
        log: false,
    })
        .then(function () {
        var style = optionsOrProps.style, stylesheets = optionsOrProps.stylesheets, stylesheet = optionsOrProps.stylesheet, styles = optionsOrProps.styles, cssFiles = optionsOrProps.cssFiles, cssFile = optionsOrProps.cssFile;
        injectStyles({
            style: style,
            stylesheets: stylesheets,
            stylesheet: stylesheet,
            styles: styles,
            cssFiles: cssFiles,
            cssFile: cssFile,
        });
    })
        .then(function (win) {
        var localVue = testUtils.createLocalVue();
        // @ts-ignore
        win.Vue = localVue;
        localVue.config.errorHandler = failTestOnVueError;
        // set global Vue instance:
        // 1. convenience for debugging in DevTools
        // 2. some libraries might check for this global
        // appIframe.contentWindow.Vue = localVue
        // refresh inner Vue instance of Vuex store
        // @ts-ignore
        if (hasStore(component)) {
            // @ts-ignore
            component.store = resetStoreVM(localVue, component);
        }
        // @ts-ignore
        var document = cy.state('document');
        var el = document.getElementById(mountUtils.ROOT_ID);
        var componentNode = document.createElement('div');
        el.append(componentNode);
        // setup Vue instance
        installFilters(localVue, options);
        installMixins(localVue, options);
        installPlugins(localVue, options, props);
        registerGlobalComponents(localVue, options);
        props.attachTo = componentNode;
        var wrapper = localVue.extend(component);
        var VTUWrapper = testUtils.mount(wrapper, __assign({ localVue: localVue }, props));
        Cypress.vue = VTUWrapper.vm;
        Cypress.vueWrapper = VTUWrapper;
    });
};
/**
 * Helper function for mounting a component quickly in test hooks.
 * @example
 *  import {mountCallback} from '@cypress/vue'
 *  beforeEach(mountVue(component, options))
 */
var mountCallback = function (component, options) {
    return function () { return mount(component, options); };
};
mountUtils.setupHooks();

exports.mount = mount;
exports.mountCallback = mountCallback;
