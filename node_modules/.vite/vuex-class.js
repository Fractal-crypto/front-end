import {
  createDecorator
} from "./chunk-MWZ3WLE5.js";
import {
  mapActions,
  mapGetters,
  mapMutations,
  mapState
} from "./chunk-XX6OGV4O.js";
import "./chunk-WKH64EM6.js";
import "./chunk-MS22ZBJX.js";

// node_modules/vuex-class/lib/bindings.js
var State = createBindingHelper("computed", mapState);
var Getter = createBindingHelper("computed", mapGetters);
var Action = createBindingHelper("methods", mapActions);
var Mutation = createBindingHelper("methods", mapMutations);
function namespace(namespace2, helper) {
  function createNamespacedHelper(helper2) {
    function namespacedHelper(a, b) {
      if (typeof b === "string") {
        var key = b;
        var proto = a;
        return helper2(key, { namespace: namespace2 })(proto, key);
      }
      var type = a;
      var options = merge(b || {}, { namespace: namespace2 });
      return helper2(type, options);
    }
    return namespacedHelper;
  }
  if (helper) {
    console.warn("[vuex-class] passing the 2nd argument to `namespace` function is deprecated. pass only namespace string instead.");
    return createNamespacedHelper(helper);
  }
  return {
    State: createNamespacedHelper(State),
    Getter: createNamespacedHelper(Getter),
    Mutation: createNamespacedHelper(Mutation),
    Action: createNamespacedHelper(Action)
  };
}
function createBindingHelper(bindTo, mapFn) {
  function makeDecorator(map, namespace2) {
    return createDecorator(function(componentOptions, key) {
      if (!componentOptions[bindTo]) {
        componentOptions[bindTo] = {};
      }
      var mapObject = (_a = {}, _a[key] = map, _a);
      componentOptions[bindTo][key] = namespace2 !== void 0 ? mapFn(namespace2, mapObject)[key] : mapFn(mapObject)[key];
      var _a;
    });
  }
  function helper(a, b) {
    if (typeof b === "string") {
      var key = b;
      var proto = a;
      return makeDecorator(key, void 0)(proto, key);
    }
    var namespace2 = extractNamespace(b);
    var type = a;
    return makeDecorator(type, namespace2);
  }
  return helper;
}
function extractNamespace(options) {
  var n = options && options.namespace;
  if (typeof n !== "string") {
    return void 0;
  }
  if (n[n.length - 1] !== "/") {
    return n + "/";
  }
  return n;
}
function merge(a, b) {
  var res = {};
  [a, b].forEach(function(obj) {
    Object.keys(obj).forEach(function(key) {
      res[key] = obj[key];
    });
  });
  return res;
}
export {
  Action,
  Getter,
  Mutation,
  State,
  namespace
};
//# sourceMappingURL=vuex-class.js.map
