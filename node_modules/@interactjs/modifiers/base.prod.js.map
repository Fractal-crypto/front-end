{
	"version": 3,
	"sources": [
		"base.ts"
	],
	"names": [
		"Modification",
		"makeModifier",
		"module",
		"name",
		"defaults",
		"methods",
		"start",
		"set",
		"beforeEnd",
		"stop",
		"modifier",
		"_options",
		"options",
		"enabled",
		"prop",
		"m",
		"enable",
		"disable",
		"_defaults",
		"_methods",
		"addEventModifiers",
		"iEvent",
		"interaction",
		"result",
		"modification",
		"modifiers",
		"eventProps",
		"modifiersBase",
		"id",
		"before",
		"install",
		"scope",
		"perAction",
		"listeners",
		"[object Object]",
		"arg",
		"coords",
		"page",
		"edges",
		"applyToInteraction",
		"interactions:before-action-move",
		"setAndApply",
		"interactions:before-action-end",
		"interactions:action-start",
		"interactions:action-move",
		"interactions:action-end",
		"interactions:after-action-start",
		"restoreInteractionCoords",
		"interactions:after-action-move",
		"interactions:stop"
	],
	"mappings": "OAMOA,MAAkB,gCAsFlB,SAASC,aAKbC,EAAiDC,GAClD,MAAMC,SAAEA,GAAaF,EACfG,EAAU,CACdC,MAAOJ,EAAOI,MACdC,IAAKL,EAAOK,IACZC,UAAWN,EAAOM,UAClBC,KAAMP,EAAOO,MAGTC,EAAYC,IAChB,MAAMC,EAAWD,GAAY,GAE7BC,EAAQC,SAA8B,IAApBD,EAAQC,QAG1B,IAAK,MAAMC,KAAQV,EACXU,KAAQF,IACVA,EAAgBE,GAAQV,EAASU,IAIvC,MAAMC,EAA6C,CACjDH,QAAAA,EACAP,QAAAA,EACAF,KAAAA,EACAa,OAAQ,KACNJ,EAAQC,SAAU,EACXE,GAETE,QAAS,KACPL,EAAQC,SAAU,EACXE,IAIX,OAAOA,GAST,OANIZ,GAAwB,iBAATA,IAEjBO,EAASQ,UAAYd,EACrBM,EAASS,SAAWd,GAGfK,SAGF,SAASU,mBAAmBC,OACjCA,EADiCC,YAEjCA,IAKA,MAAMC,EAASD,EAAYE,aAAcD,OAErCA,IACFF,EAAOI,UAAYF,EAAOG,YAI9B,MAAMC,EAAwB,CAC5BC,GAAI,iBACJC,OAAQ,CAAC,WACTC,QAAUC,GACRA,EAAM3B,SAAS4B,UAAUP,UAAY,IAEvCQ,UAAW,CACTC,oBAAuBZ,YAAAA,IACrBA,EAAYE,aAAe,IAAIxB,EAAasB,IAG9CY,mCAAqCC,GACnC,MAAMX,EAAeW,EAAIb,YAAYE,aAErCA,EAAalB,MAAM6B,EAAKA,EAAIb,YAAYc,OAAO9B,MAAM+B,MACrDF,EAAIb,YAAYgB,MAAQd,EAAac,MACrCd,EAAae,mBAAmBJ,IAGlCK,kCAAoCL,GAAQA,EAAIb,YAAYE,aAAaiB,YAAYN,GAErFO,iCAAmCP,GAAQA,EAAIb,YAAYE,aAAahB,UAAU2B,GAElFQ,4BAA6BvB,kBAC7BwB,2BAA4BxB,kBAC5ByB,0BAA2BzB,kBAE3B0B,kCAAoCX,GAAQA,EAAIb,YAAYE,aAAauB,yBAAyBZ,GAClGa,iCAAmCb,GAAQA,EAAIb,YAAYE,aAAauB,yBAAyBZ,GAEjGc,oBAAsBd,GAAQA,EAAIb,YAAYE,aAAaf,KAAK0B,oBAIrDR",
	"sourcesContent": [
		"import type { EventPhase, InteractEvent } from '@interactjs/core/InteractEvent'\nimport type { Interactable } from '@interactjs/core/Interactable'\nimport type Interaction from '@interactjs/core/Interaction'\nimport type { Plugin } from '@interactjs/core/scope'\nimport type { EdgeOptions, FullRect, Point, Rect } from '@interactjs/types/index'\n\nimport Modification from './Modification'\n\ndeclare module '@interactjs/core/Interaction' {\n  interface Interaction {\n    modification?: Modification\n  }\n}\n\ndeclare module '@interactjs/core/InteractEvent' {\n  interface InteractEvent {\n    modifiers?: Array<{\n      name: string\n      [key: string]: any\n    }>\n  }\n}\n\ndeclare module '@interactjs/core/options' {\n  interface PerActionDefaults {\n    modifiers?: Modifier[]\n  }\n}\n\nexport interface Modifier<\n  Defaults = any,\n  State extends ModifierState = any,\n  Name extends string = any,\n  Result = any\n> {\n  options: Defaults\n  methods: {\n    start?: (arg: ModifierArg<State>) => void\n    set?: (arg: ModifierArg<State>) => Result\n    beforeEnd?: (arg: ModifierArg<State>) => Point | void\n    stop?: (arg: ModifierArg<State>) => void\n  }\n  name?: Name\n  enable: () => Modifier<Defaults, State, Name, Result>\n  disable: () => Modifier<Defaults, State, Name, Result>\n}\n\nexport type ModifierState<Defaults = unknown, StateProps = unknown, Name extends string = any> = {\n  options: Defaults\n  methods?: Modifier<Defaults>['methods']\n  index?: number\n  name?: Name\n} & StateProps\n\nexport interface ModifierArg<State extends ModifierState = ModifierState> {\n  interaction: Interaction\n  interactable: Interactable\n  phase: EventPhase\n  rect: FullRect\n  edges: EdgeOptions\n  state: State\n  element: Element\n  pageCoords: Point\n  prevCoords: Point\n  prevRect?: FullRect\n  coords: Point\n  startOffset: Rect\n  preEnd?: boolean\n}\n\nexport interface ModifierModule<\n  Defaults extends { enabled?: boolean },\n  State extends ModifierState,\n  Result = unknown\n> {\n  defaults?: Defaults\n  start?(arg: ModifierArg<State>): void\n  set?(arg: ModifierArg<State>): Result\n  beforeEnd?(arg: ModifierArg<State>): Point | void\n  stop?(arg: ModifierArg<State>): void\n}\n\nexport interface ModifierFunction<\n  Defaults extends { enabled?: boolean },\n  State extends ModifierState,\n  Name extends string\n> {\n  (_options?: Partial<Defaults>): Modifier<Defaults, State, Name>\n  _defaults: Defaults\n  _methods: ModifierModule<Defaults, State>\n}\n\nexport function makeModifier<\n  Defaults extends { enabled?: boolean },\n  State extends ModifierState,\n  Name extends string,\n  Result\n> (module: ModifierModule<Defaults, State, Result>, name?: Name) {\n  const { defaults } = module\n  const methods = {\n    start: module.start,\n    set: module.set,\n    beforeEnd: module.beforeEnd,\n    stop: module.stop,\n  }\n\n  const modifier = (_options?: Partial<Defaults>) => {\n    const options = (_options || {}) as Defaults\n\n    options.enabled = options.enabled !== false\n\n    // add missing defaults to options\n    for (const prop in defaults) {\n      if (!(prop in options)) {\n        ;(options as any)[prop] = defaults[prop]\n      }\n    }\n\n    const m: Modifier<Defaults, State, Name, Result> = {\n      options,\n      methods,\n      name,\n      enable: () => {\n        options.enabled = true\n        return m\n      },\n      disable: () => {\n        options.enabled = false\n        return m\n      },\n    }\n\n    return m\n  }\n\n  if (name && typeof name === 'string') {\n    // for backwrads compatibility\n    modifier._defaults = defaults\n    modifier._methods = methods\n  }\n\n  return modifier\n}\n\nexport function addEventModifiers ({\n  iEvent,\n  interaction,\n}: {\n  iEvent: InteractEvent<any>\n  interaction: Interaction<any>\n}) {\n  const result = interaction.modification!.result\n\n  if (result) {\n    iEvent.modifiers = result.eventProps\n  }\n}\n\nconst modifiersBase: Plugin = {\n  id: 'modifiers/base',\n  before: ['actions'],\n  install: (scope) => {\n    scope.defaults.perAction.modifiers = []\n  },\n  listeners: {\n    'interactions:new': ({ interaction }) => {\n      interaction.modification = new Modification(interaction)\n    },\n\n    'interactions:before-action-start': (arg) => {\n      const modification = arg.interaction.modification!\n\n      modification.start(arg, arg.interaction.coords.start.page)\n      arg.interaction.edges = modification.edges\n      modification.applyToInteraction(arg)\n    },\n\n    'interactions:before-action-move': (arg) => arg.interaction.modification.setAndApply(arg),\n\n    'interactions:before-action-end': (arg) => arg.interaction.modification.beforeEnd(arg),\n\n    'interactions:action-start': addEventModifiers,\n    'interactions:action-move': addEventModifiers,\n    'interactions:action-end': addEventModifiers,\n\n    'interactions:after-action-start': (arg) => arg.interaction.modification.restoreInteractionCoords(arg),\n    'interactions:after-action-move': (arg) => arg.interaction.modification.restoreInteractionCoords(arg),\n\n    'interactions:stop': (arg) => arg.interaction.modification.stop(arg),\n  },\n}\n\nexport default modifiersBase\n"
	]
}