{
	"version": 3,
	"sources": [
		"plugin.ts"
	],
	"names": [
		"arr",
		"is",
		"copyAction",
		"pointerUtils",
		"tlbrToXywh",
		"install",
		"scope",
		"Interactable",
		"actions",
		"phases",
		"reflow",
		"prototype",
		"action",
		"doReflow",
		"interactable",
		"elements",
		"string",
		"target",
		"from",
		"_context",
		"querySelectorAll",
		"Promise",
		"window",
		"promises",
		"element",
		"rect",
		"getRect",
		"runningInteraction",
		"find",
		"interactions",
		"list",
		"interaction",
		"interacting",
		"prepared",
		"name",
		"reflowPromise",
		"move",
		"_reflowPromise",
		"resolve",
		"_reflowResolve",
		"xywh",
		"coords",
		"page",
		"x",
		"y",
		"client",
		"timeStamp",
		"now",
		"event",
		"coordsToEvent",
		"startReflow",
		"push",
		"all",
		"then",
		"new",
		"pointerType",
		"signalArg",
		"pointer",
		"eventTarget",
		"phase",
		"prevEvent",
		"updatePointer",
		"setZeroCoords",
		"delta",
		"_doPhase",
		"undefined",
		"start",
		"_interacting",
		"end",
		"stop",
		"removePointer",
		"id",
		"listeners",
		"remove"
	],
	"mappings": "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",
	"sourcesContent": [
		"import type { Interactable } from '@interactjs/core/Interactable'\nimport type { ActionProps, DoAnyPhaseArg, Interaction } from '@interactjs/core/Interaction'\nimport type { ActionName, Scope, Plugin } from '@interactjs/core/scope'\nimport type { Element } from '@interactjs/types/index'\nimport * as arr from '@interactjs/utils/arr'\nimport is from '@interactjs/utils/is'\nimport { copyAction } from '@interactjs/utils/misc'\nimport * as pointerUtils from '@interactjs/utils/pointerUtils'\nimport { tlbrToXywh } from '@interactjs/utils/rect'\n\ndeclare module '@interactjs/core/scope' {\n  interface SignalArgs {\n    'interactions:before-action-reflow': Omit<DoAnyPhaseArg, 'iEvent'>\n    'interactions:action-reflow': DoAnyPhaseArg\n    'interactions:after-action-reflow': DoAnyPhaseArg\n  }\n}\n\ndeclare module '@interactjs/core/Interactable' {\n  interface Interactable {\n    reflow: <T extends ActionName>(action: ActionProps<T>) => ReturnType<typeof doReflow>\n  }\n}\n\ndeclare module '@interactjs/core/Interaction' {\n  interface Interaction {\n    _reflowPromise: Promise<void>\n    _reflowResolve: (...args: unknown[]) => void\n  }\n}\n\ndeclare module '@interactjs/core/InteractEvent' {\n  interface PhaseMap {\n    reflow?: true\n  }\n}\n\nexport function install (scope: Scope) {\n  const {\n    /** @lends Interactable */\n    Interactable,\n  } = scope\n\n  scope.actions.phases.reflow = true\n\n  /**\n   * ```js\n   * const interactable = interact(target)\n   * const drag = { name: drag, axis: 'x' }\n   * const resize = { name: resize, edges: { left: true, bottom: true }\n   *\n   * interactable.reflow(drag)\n   * interactable.reflow(resize)\n   * ```\n   *\n   * Start an action sequence to re-apply modifiers, check drops, etc.\n   *\n   * @param { Object } action The action to begin\n   * @param { string } action.name The name of the action\n   * @returns { Promise } A promise that resolves to the `Interactable` when actions on all targets have ended\n   */\n  Interactable.prototype.reflow = function (action: ActionProps) {\n    return doReflow(this, action, scope)\n  }\n}\n\nfunction doReflow<T extends ActionName> (\n  interactable: Interactable,\n  action: ActionProps<T>,\n  scope: Scope,\n): Promise<Interactable> {\n  const elements = (is.string(interactable.target)\n    ? arr.from(interactable._context.querySelectorAll(interactable.target))\n    : [interactable.target]) as Element[]\n\n  // tslint:disable-next-line variable-name\n  const Promise = (scope.window as any).Promise\n  const promises: Array<Promise<null>> | null = Promise ? [] : null\n\n  for (const element of elements) {\n    const rect = interactable.getRect(element as HTMLElement | SVGElement)\n\n    if (!rect) {\n      break\n    }\n\n    const runningInteraction = arr.find(scope.interactions.list, (interaction: Interaction) => {\n      return (\n        interaction.interacting() &&\n        interaction.interactable === interactable &&\n        interaction.element === element &&\n        interaction.prepared.name === action.name\n      )\n    })\n    let reflowPromise: Promise<null>\n\n    if (runningInteraction) {\n      runningInteraction.move()\n\n      if (promises) {\n        reflowPromise =\n          runningInteraction._reflowPromise ||\n          new Promise((resolve: any) => {\n            runningInteraction._reflowResolve = resolve\n          })\n      }\n    } else {\n      const xywh = tlbrToXywh(rect)\n      const coords = {\n        page: { x: xywh.x, y: xywh.y },\n        client: { x: xywh.x, y: xywh.y },\n        timeStamp: scope.now(),\n      }\n\n      const event = pointerUtils.coordsToEvent(coords)\n      reflowPromise = startReflow<T>(scope, interactable, element, action, event)\n    }\n\n    if (promises) {\n      promises.push(reflowPromise)\n    }\n  }\n\n  return promises && Promise.all(promises).then(() => interactable)\n}\n\nfunction startReflow<T extends ActionName> (\n  scope: Scope,\n  interactable: Interactable,\n  element: Element,\n  action: ActionProps<T>,\n  event: any,\n) {\n  const interaction = scope.interactions.new({ pointerType: 'reflow' })\n  const signalArg = {\n    interaction,\n    event,\n    pointer: event,\n    eventTarget: element,\n    phase: 'reflow',\n  } as const\n\n  interaction.interactable = interactable\n  interaction.element = element\n  interaction.prevEvent = event\n  interaction.updatePointer(event, event, element, true)\n  pointerUtils.setZeroCoords(interaction.coords.delta)\n\n  copyAction(interaction.prepared, action)\n  interaction._doPhase(signalArg)\n\n  const { Promise } = (scope.window as unknown) as { Promise: PromiseConstructor }\n  const reflowPromise = Promise\n    ? new Promise<undefined>((resolve) => {\n      interaction._reflowResolve = resolve\n    })\n    : undefined\n\n  interaction._reflowPromise = reflowPromise\n  interaction.start(action, interactable, element)\n\n  if (interaction._interacting) {\n    interaction.move(signalArg)\n    interaction.end(event)\n  } else {\n    interaction.stop()\n    interaction._reflowResolve()\n  }\n\n  interaction.removePointer(event, event)\n\n  return reflowPromise\n}\n\nconst reflow: Plugin = {\n  id: 'reflow',\n  install,\n  listeners: {\n    // remove completed reflow interactions\n    'interactions:stop': ({ interaction }, scope) => {\n      if (interaction.pointerType === 'reflow') {\n        if (interaction._reflowResolve) {\n          interaction._reflowResolve()\n        }\n\n        arr.remove(scope.interactions.list, interaction)\n      }\n    },\n  },\n}\n\nexport default reflow\n"
	]
}