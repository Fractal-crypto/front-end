{"version":3,"file":"TradesLog.de59ac3c.js","sources":["../../src/components/charts/CumProfitChart.vue","../../src/components/charts/CumProfitChart.vue?vue&type=template&lang.js","../../src/components/charts/TradesLog.vue","../../src/components/charts/TradesLog.vue?vue&type=template&lang.js"],"sourcesContent":["<template>\n  <v-chart v-if=\"trades\" :option=\"chartOptions\" autoresize :theme=\"getChartTheme\" />\n</template>\n\n<script lang=\"ts\">\nimport { Component, Vue, Prop } from 'vue-property-decorator';\nimport { Getter } from 'vuex-class';\n\nimport ECharts from 'vue-echarts';\nimport { EChartsOption } from 'echarts';\n\nimport { use } from 'echarts/core';\nimport { CanvasRenderer } from 'echarts/renderers';\nimport { LineChart, BarChart } from 'echarts/charts';\nimport {\n  DatasetComponent,\n  DataZoomComponent,\n  LegendComponent,\n  TitleComponent,\n  TooltipComponent,\n} from 'echarts/components';\n\nimport { ClosedTrade, CumProfitData, CumProfitDataPerDate } from '@/types';\n\nuse([\n  BarChart,\n  LineChart,\n\n  CanvasRenderer,\n\n  DatasetComponent,\n  DataZoomComponent,\n  LegendComponent,\n  TitleComponent,\n  TooltipComponent,\n]);\n\n// Define Column labels here to avoid typos\nconst CHART_PROFIT = 'Profit';\n\n@Component({\n  components: {\n    'v-chart': ECharts,\n  },\n})\nexport default class CumProfitChart extends Vue {\n  @Prop({ required: true }) trades!: ClosedTrade[];\n\n  @Prop({ default: true, type: Boolean }) showTitle!: boolean;\n\n  @Prop({ default: 'close_profit_abs' }) profitColumn!: string;\n\n  @Getter getChartTheme!: string;\n\n  botList: string[] = [];\n\n  get cumulativeData() {\n    this.botList = [];\n    const res: CumProfitData[] = [];\n    const resD: CumProfitDataPerDate = {};\n    const closedTrades = this.trades\n      .slice()\n      .sort((a, b) => (a.close_timestamp > b.close_timestamp ? 1 : -1));\n    let profit = 0.0;\n\n    for (let i = 0, len = closedTrades.length; i < len; i += 1) {\n      const trade = closedTrades[i];\n\n      if (trade.close_timestamp && trade[this.profitColumn]) {\n        profit += trade[this.profitColumn];\n        if (!resD[trade.close_timestamp]) {\n          // New timestamp\n          resD[trade.close_timestamp] = { profit, [trade.botId]: profit };\n        } else {\n          // Add to existing profit\n          resD[trade.close_timestamp].profit += trade[this.profitColumn];\n          if (resD[trade.close_timestamp][trade.botId]) {\n            resD[trade.close_timestamp][trade.botId] += trade[this.profitColumn];\n          } else {\n            resD[trade.close_timestamp][trade.botId] = profit;\n          }\n        }\n        // console.log(trade.close_date, profit);\n        res.push({ date: trade.close_timestamp, profit, [trade.botId]: profit });\n        if (!this.botList.includes(trade.botId)) {\n          this.botList.push(trade.botId);\n        }\n      }\n    }\n    // console.log(resD);\n\n    return Object.entries(resD).map(([k, v]) => {\n      const obj = { date: parseInt(k, 10), profit: v.profit };\n      // TODO: The below could allow \"lines\" per bot\"\n      // this.botList.forEach((botId) => {\n      // obj[botId] = v[botId];\n      // });\n      return obj;\n    });\n  }\n\n  get chartOptions(): EChartsOption {\n    const chartOptionsLoc: EChartsOption = {\n      title: {\n        text: 'Cumulative Profit',\n        show: this.showTitle,\n      },\n      backgroundColor: 'rgba(0, 0, 0, 0)',\n      dataset: {\n        dimensions: ['date', 'profit'],\n        source: this.cumulativeData,\n      },\n      tooltip: {\n        trigger: 'axis',\n        axisPointer: {\n          type: 'line',\n          label: {\n            backgroundColor: '#6a7985',\n          },\n        },\n      },\n      legend: {\n        data: [CHART_PROFIT],\n        right: '5%',\n      },\n      useUTC: false,\n      xAxis: {\n        type: 'time',\n      },\n      yAxis: [\n        {\n          type: 'value',\n          name: CHART_PROFIT,\n          splitLine: {\n            show: false,\n          },\n          nameRotate: 90,\n          nameLocation: 'middle',\n          nameGap: 40,\n        },\n      ],\n      grid: {\n        bottom: 80,\n      },\n      dataZoom: [\n        {\n          type: 'inside',\n          // xAxisIndex: [0],\n          start: 0,\n          end: 100,\n        },\n        {\n          show: true,\n          // xAxisIndex: [0],\n          type: 'slider',\n          bottom: 10,\n          start: 0,\n          end: 100,\n        },\n      ],\n      series: [\n        {\n          type: 'line',\n          name: CHART_PROFIT,\n          animation: true,\n          step: 'end',\n          lineStyle: {\n            color: this.getChartTheme === 'dark' ? '#c2c2c2' : 'black',\n          },\n          itemStyle: {\n            color: this.getChartTheme === 'dark' ? '#c2c2c2' : 'black',\n          },\n          // symbol: 'none',\n        },\n      ],\n    };\n    // TODO: maybe have profit lines per bot?\n    // this.botList.forEach((botId: string) => {\n    //   console.log('bot', botId);\n    //   chartOptionsLoc.series.push({\n    //     type: 'line',\n    //     name: botId,\n    //     animation: true,\n    //     step: 'end',\n    //     lineStyle: {\n    //       color: this.getChartTheme === 'dark' ? '#c2c2c2' : 'black',\n    //     },\n    //     itemStyle: {\n    //       color: this.getChartTheme === 'dark' ? '#c2c2c2' : 'black',\n    //     },\n    //     // symbol: 'none',\n    //   });\n    // });\n    return chartOptionsLoc;\n  }\n}\n</script>\n\n<style scoped>\n.echarts {\n  width: 100%;\n  height: 100%;\n  min-height: 150px;\n}\n</style>\n","\n<v-chart v-if=\"trades\" :option=\"chartOptions\" autoresize :theme=\"getChartTheme\" />\n","<template>\n  <v-chart v-if=\"trades.length > 0\" :option=\"chartOptions\" autoresize :theme=\"getChartTheme\" />\n</template>\n\n<script lang=\"ts\">\nimport { Component, Vue, Prop } from 'vue-property-decorator';\nimport { Getter } from 'vuex-class';\n\nimport ECharts from 'vue-echarts';\nimport { EChartsOption } from 'echarts';\n\nimport { use } from 'echarts/core';\nimport { CanvasRenderer } from 'echarts/renderers';\nimport { LineChart, BarChart } from 'echarts/charts';\nimport {\n  DatasetComponent,\n  DataZoomComponent,\n  LegendComponent,\n  TitleComponent,\n  TooltipComponent,\n  VisualMapComponent,\n  VisualMapPiecewiseComponent,\n} from 'echarts/components';\n\nimport { ClosedTrade } from '@/types';\n\nimport { timestampms } from '@/shared/formatters';\n\nuse([\n  BarChart,\n  LineChart,\n\n  CanvasRenderer,\n\n  DatasetComponent,\n  DataZoomComponent,\n  LegendComponent,\n  TitleComponent,\n  TooltipComponent,\n  VisualMapComponent,\n  VisualMapPiecewiseComponent,\n]);\n\n// Define Column labels here to avoid typos\nconst CHART_PROFIT = 'Profit %';\nconst CHART_COLOR = '#9be0a8';\n\n@Component({\n  components: {\n    'v-chart': ECharts,\n  },\n})\nexport default class TradesLogChart extends Vue {\n  @Prop({ required: true }) trades!: ClosedTrade[];\n\n  @Prop({ default: true, type: Boolean }) showTitle!: boolean;\n\n  @Getter getChartTheme!: string;\n\n  get chartData() {\n    const res: (number | string)[][] = [];\n    const sortedTrades = this.trades\n      .slice(0)\n      .sort((a, b) => (a.close_timestamp > b.close_timestamp ? 1 : -1));\n    for (let i = 0, len = sortedTrades.length; i < len; i += 1) {\n      const trade = sortedTrades[i];\n      const entry = [\n        i,\n        (trade.profit_ratio * 100).toFixed(2),\n        trade.pair,\n        trade.botName,\n        timestampms(trade.close_timestamp),\n      ];\n      res.push(entry);\n    }\n    return res;\n  }\n\n  get chartOptions(): EChartsOption {\n    const { chartData } = this;\n    // Show a maximum of 50 trades by default - allowing to zoom out further.\n    const datazoomStart = chartData.length > 0 ? (1 - 50 / chartData.length) * 100 : 100;\n    return {\n      title: {\n        text: 'Trades log',\n        show: this.showTitle,\n      },\n      backgroundColor: 'rgba(0, 0, 0, 0)',\n      dataset: {\n        dimensions: ['date', 'profit'],\n        source: chartData,\n      },\n      tooltip: {\n        trigger: 'axis',\n        formatter: (params) => {\n          if (params[0].data[3]) {\n            return `${params[0].data[2]} | ${params[0].data[3]}<br>${params[0].data[4]}<br>Profit ${params[0].data[1]} %`;\n          }\n          return `${params[0].data[2]}<br>${params[0].data[4]}<br>Profit ${params[0].data[1]} %`;\n        },\n        axisPointer: {\n          type: 'line',\n          label: {\n            backgroundColor: '#6a7985',\n          },\n        },\n      },\n      xAxis: {\n        type: 'value',\n        show: false,\n      },\n      yAxis: [\n        {\n          type: 'value',\n          name: CHART_PROFIT,\n          splitLine: {\n            show: false,\n          },\n          nameRotate: 90,\n          nameLocation: 'middle',\n          nameGap: 30,\n        },\n      ],\n      grid: {\n        bottom: 80,\n      },\n      dataZoom: [\n        {\n          type: 'inside',\n          start: datazoomStart,\n          end: 100,\n        },\n        {\n          show: true,\n          type: 'slider',\n          bottom: 10,\n          start: datazoomStart,\n          end: 100,\n        },\n      ],\n      visualMap: [\n        {\n          show: true,\n          seriesIndex: 0,\n          pieces: [\n            {\n              max: 0.0,\n              color: '#f84960',\n            },\n            {\n              min: 0.0,\n              color: '#2ed191',\n            },\n          ],\n        },\n      ],\n      series: [\n        {\n          type: 'bar',\n          name: CHART_PROFIT,\n          barGap: '0%',\n          barCategoryGap: '0%',\n          animation: false,\n          label: {\n            show: true,\n            position: 'top',\n            rotate: 90,\n            offset: [7.5, 7.5],\n            formatter: '{@[1]} %',\n            color: this.getChartTheme === 'dark' ? '#c2c2c2' : '#3c3c3c',\n          },\n          encode: {\n            x: 0,\n            y: 1,\n          },\n\n          itemStyle: {\n            color: CHART_COLOR,\n          },\n        },\n      ],\n    };\n  }\n}\n</script>\n\n<style scoped>\n.echarts {\n  width: 100%;\n  height: 100%;\n  min-height: 150px;\n}\n</style>\n","\n<v-chart v-if=\"trades.length > 0\" :option=\"chartOptions\" autoresize :theme=\"getChartTheme\" />\n"],"names":["CumProfitChart","render","staticRenderFns","TradesLogChart"],"mappings":"ucAwBA,qBAcA,iBAOA,sBAAA,+mDAAAA,oCAAAA,GC7CA,GAAIC,GAAS,UAAY,CAAC,GAAI,GAAI,KAAS,EAAG,EAAI,eAAmB,EAAG,EAAI,MAAM,IAAI,EAAG,MAAQ,GAAI,OAAQ,EAAG,UAAU,CAAC,MAAM,CAAC,OAAS,EAAI,aAAa,WAAa,GAAG,MAAQ,EAAI,iBAAiB,EAAI,MACzMC,EAAkB,GACtBD,EAAO,cAAgB,8XC0BvB,yBAgBA,+BAQA,o7CAAAE,oCAAAA,GCpDA,GAAI,GAAS,UAAY,CAAC,GAAI,GAAI,KAAS,EAAG,EAAI,eAAmB,EAAG,EAAI,MAAM,IAAI,EAAG,MAAQ,GAAI,OAAO,OAAS,EAAG,EAAG,UAAU,CAAC,MAAM,CAAC,OAAS,EAAI,aAAa,WAAa,GAAG,MAAQ,EAAI,iBAAiB,EAAI,MACpN,EAAkB,GACtB,EAAO,cAAgB"}