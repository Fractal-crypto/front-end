{"version":3,"file":"Logintest.e0796876.js","sources":["../../node_modules/@vueblocks/vue-use-vuex/node_modules/vue-demi/lib/index.esm.js","../../node_modules/@vueblocks/vue-use-vuex/lib/index.esm.js","../../src/views/Logintest.vue?vue&type=template&lang.js","../../src/views/Logintest.vue"],"sourcesContent":["import Vue from 'vue'\nimport VueCompositionAPI from '@vue/composition-api'\n\nfunction install(_vue) {\n  _vue = _vue || Vue\n  if (_vue && !_vue['__composition_api_installed__'])\n    Vue.use(VueCompositionAPI)\n}\n\ninstall(Vue)\n\nvar isVue2 = true\nvar isVue3 = false\nvar Vue2 = Vue\nvar version = Vue.version\n\n/**VCA-EXPORTS**/\nexport { EffectScope, computed, createApp, createRef, customRef, defineAsyncComponent, defineComponent, del, effectScope, getCurrentInstance, getCurrentScope, h, inject, isRaw, isReactive, isReadonly, isRef, markRaw, nextTick, onActivated, onBeforeMount, onBeforeUnmount, onBeforeUpdate, onDeactivated, onErrorCaptured, onMounted, onScopeDispose, onServerPrefetch, onUnmounted, onUpdated, provide, proxyRefs, reactive, readonly, ref, set, shallowReactive, shallowReadonly, shallowRef, toRaw, toRef, toRefs, triggerRef, unref, useAttrs, useCSSModule, useCssModule, useSlots, warn, watch, watchEffect, watchPostEffect, watchSyncEffect } from '@vue/composition-api'\n/**VCA-EXPORTS**/\n\nexport {\n  Vue,\n  Vue2,\n  isVue2,\n  isVue3,\n  version,\n  install,\n}\n","/*!\n * @vueblocks/vue-use-vuex v0.2.10\n * (c) 2021 xiaoluoboding\n * @license MIT\n */\nimport { computed, getCurrentInstance, isVue3 } from 'vue-demi';\n\nconst isObject = (val) => toString.call(val) === '[object Object]';\r\nconst isString = (str) => typeof str === 'string';\r\nconst partial = (fn, ...partials) => (...args) => fn(...partials, ...args);\n\n/**\r\n * Validate whether given map is valid or not\r\n * @param {*} map\r\n * @return {Boolean}\r\n */\r\nfunction isValidMap(map) {\r\n    return Array.isArray(map) || isObject(map);\r\n}\r\n/**\r\n * Normalize the map\r\n * normalizeMap([1, 2, 3]) => [ { key: 1, val: 1 }, { key: 2, val: 2 }, { key: 3, val: 3 } ]\r\n * normalizeMap({a: 1, b: 2, c: 3}) => [ { key: 'a', val: 1 }, { key: 'b', val: 2 }, { key: 'c', val: 3 } ]\r\n * @param {Array|Object} map\r\n * @return {Object}\r\n */\r\nfunction normalizeMap(map) {\r\n    if (!isValidMap(map)) {\r\n        return [];\r\n    }\r\n    return Array.isArray(map)\r\n        ? map.map((key) => ({ key, val: key }))\r\n        : Object.keys(map).map(key => ({ key, val: map[key] }));\r\n}\r\n/**\r\n * Return a function expect two param contains namespace and map. it will normalize the namespace and then the param's function will handle the new namespace and the map.\r\n * @param {Function} fn\r\n * @return {Function}\r\n */\r\nfunction normalizeNamespace(fn) {\r\n    return (namespace, map) => {\r\n        if (!isString(namespace)) {\r\n            map = namespace;\r\n            namespace = '';\r\n        }\r\n        else if (namespace.charAt(namespace.length - 1) !== '/') {\r\n            namespace += '/';\r\n        }\r\n        return fn(namespace, map);\r\n    };\r\n}\r\n/**\r\n * Search a special module from store by namespace. if module not exist, print error message.\r\n * @param {Object} store\r\n * @param {String} helper\r\n * @param {String} namespace\r\n * @return {Object}\r\n */\r\nfunction getModuleByNamespace(store, helper, namespace) {\r\n    const module = store._modulesNamespaceMap[namespace];\r\n    if ((process.env.NODE_ENV !== 'production') && !module) {\r\n        console.error(`[vuex] module namespace not found in ${helper}(): ${namespace}`);\r\n    }\r\n    return module;\r\n}\r\n/**\r\n * Reduce the code which written in Vue.js for getting the state.\r\n * @param {String} [namespace] - Module's namespace\r\n * @param {Object|Array} states # Object's item can be a function which accept state and getters for param, you can do something for state and getters in it.\r\n * @param {Object}\r\n */\r\nconst useState = (store, namespace, states) => {\r\n    const res = {};\r\n    if ((process.env.NODE_ENV !== 'production') && !isValidMap(states)) {\r\n        console.error('[vuex] useState: mapper parameter must be either an Array or an Object');\r\n    }\r\n    normalizeMap(states).forEach(({ key, val }) => {\r\n        res[key] = computed(function mappedState() {\r\n            let state = store.state;\r\n            let getters = store.getters;\r\n            if (namespace) {\r\n                const module = getModuleByNamespace(store, 'useState', namespace);\r\n                if (!module) {\r\n                    return;\r\n                }\r\n                state = module.context.state;\r\n                getters = module.context.getters;\r\n            }\r\n            return typeof val === 'function'\r\n                ? val(state, getters)\r\n                : state[val];\r\n        });\r\n        // mark vuex state for devtools\r\n        // res[key].vuex = true\r\n    });\r\n    return res;\r\n};\r\n/**\r\n * Reduce the code which written in Vue.js for committing the mutation\r\n * @param {String} [namespace] - Module's namespace\r\n * @param {Object|Array} mutations # Object's item can be a function which accept `commit` function as the first param, it can accept anthor params. You can commit mutation and do any other things in this function. specially, You need to pass anthor params from the mapped function.\r\n * @return {Object}\r\n */\r\nconst useMutations = (store, namespace, mutations) => {\r\n    const res = {};\r\n    if ((process.env.NODE_ENV !== 'production') && !isValidMap(mutations)) {\r\n        console.error('[vuex] useMutations: mapper parameter must be either an Array or an Object');\r\n    }\r\n    normalizeMap(mutations).forEach(({ key, val }) => {\r\n        res[key] = function mappedMutation(...args) {\r\n            // Get the commit method from store\r\n            let commit = store.commit;\r\n            if (namespace) {\r\n                const module = getModuleByNamespace(store, 'useMutations', namespace);\r\n                if (!module) {\r\n                    return;\r\n                }\r\n                commit = module.context.commit;\r\n            }\r\n            return typeof val === 'function'\r\n                ? val.apply(this, [commit].concat(args))\r\n                : commit.apply(store, [val].concat(args));\r\n        };\r\n    });\r\n    return res;\r\n};\r\n/**\r\n * Reduce the code which written in Vue.js for getting the getters\r\n * @param {String} [namespace] - Module's namespace\r\n * @param {Object|Array} getters\r\n * @return {Object}\r\n */\r\nconst useGetters = (store, namespace, getters) => {\r\n    const res = {};\r\n    if ((process.env.NODE_ENV !== 'production') && !isValidMap(getters)) {\r\n        console.error('[vuex] useGetters: mapper parameter must be either an Array or an Object');\r\n    }\r\n    normalizeMap(getters).forEach(({ key, val }) => {\r\n        // The namespace has been mutated by normalizeNamespace\r\n        val = namespace + val;\r\n        res[key] = computed(function mappedGetter() {\r\n            if (namespace && !getModuleByNamespace(store, 'useGetters', namespace)) {\r\n                return;\r\n            }\r\n            if ((process.env.NODE_ENV !== 'production') && !(val in store.getters)) {\r\n                console.error(`[vuex] unknown getter: ${val}`);\r\n                return;\r\n            }\r\n            return store.getters[val];\r\n        });\r\n        // mark vuex getter for devtools\r\n        // res[key].vuex = true\r\n    });\r\n    return res;\r\n};\r\n/**\r\n * Reduce the code which written in Vue.js for dispatch the action\r\n * @param {String} [namespace] - Module's namespace\r\n * @param {Object|Array} actions # Object's item can be a function which accept `dispatch` function as the first param, it can accept anthor params. You can dispatch action and do any other things in this function. specially, You need to pass anthor params from the mapped function.\r\n * @return {Object}\r\n */\r\nconst useActions = (store, namespace, actions) => {\r\n    const res = {};\r\n    if ((process.env.NODE_ENV !== 'production') && !isValidMap(actions)) {\r\n        console.error('[vuex] useActions: mapper parameter must be either an Array or an Object');\r\n    }\r\n    normalizeMap(actions).forEach(({ key, val }) => {\r\n        res[key] = function mappedAction(...args) {\r\n            // get dispatch function from store\r\n            let dispatch = store.dispatch;\r\n            if (namespace) {\r\n                const module = getModuleByNamespace(store, 'useActions', namespace);\r\n                if (!module) {\r\n                    return;\r\n                }\r\n                dispatch = module.context.dispatch;\r\n            }\r\n            return typeof val === 'function'\r\n                ? val.apply(this, [dispatch].concat(args))\r\n                : dispatch.apply(store, [val].concat(args));\r\n        };\r\n    });\r\n    return res;\r\n};\r\n/**\r\n * Rebinding namespace param for mapXXX function in special scoped, and return them by simple object\r\n * @param {String} namespace\r\n * @return {Object}\r\n */\r\nconst createNamespacedHelpers = (store, namespace) => {\r\n    // pre-specify initial arguments with store instance\r\n    return {\r\n        useState: partial(normalizeNamespace(partial(useState, store)), namespace),\r\n        useGetters: partial(normalizeNamespace(partial(useGetters, store)), namespace),\r\n        useMutations: partial(normalizeNamespace(partial(useMutations, store)), namespace),\r\n        useActions: partial(normalizeNamespace(partial(useActions, store)), namespace)\r\n    };\r\n};\r\n/**\r\n * Get $store from current instance\r\n * @return {Store} instance.$store\r\n */\r\nconst useStore = () => {\r\n    const instance = getCurrentInstance();\r\n    if (!instance) {\r\n        console.error('You must use this function within the \"setup()\" method');\r\n    }\r\n    return isVue3 ? instance.ctx.$store : instance.proxy.$store;\r\n};\r\n/**\r\n * Use Vuex with composition api easily. Both support Vue2.x / Vue3.x\r\n * @param {String} namespace\r\n * @param {Store} store vm.$store\r\n */\r\nfunction useVuex(namespace, store) {\r\n    if (!store)\r\n        store = useStore();\r\n    // pre-specify initial arguments with store instance\r\n    let helpers = {\r\n        useState: normalizeNamespace(partial(useState, store)),\r\n        useGetters: normalizeNamespace(partial(useGetters, store)),\r\n        useMutations: normalizeNamespace(partial(useMutations, store)),\r\n        useActions: normalizeNamespace(partial(useActions, store))\r\n    };\r\n    if (arguments.length >= 1 && isString(namespace)) {\r\n        helpers = partial(createNamespacedHelpers, store)(namespace);\r\n    }\r\n    return helpers;\r\n}\n\nexport { createNamespacedHelpers, useActions, useGetters, useMutations, useState, useStore, useVuex };\n","\n\n<main class=\"login2\">\n    <section class=\"forms\">\n        <form class=\"register\" @submit.prevent=\"register\">\n            <h2>Register</h2>\n            <input\n                type=\"email\"\n                placeholder=\"Email address\"\n                v-model=\"register_form.email\" />\n\n            <input\n                type=\"password\"\n                placeholder=\"Password\"\n                v-model=\"register_form.password\" />\n\n            <input\n                type=\"submit\"\n                value=\"Register\" />\n\n        </form>\n\n        <form class=\"login\" @submit.prevent=\"login\">\n            <h2>login</h2>\n            <input\n                type=\"email\"\n                placeholder=\"Email address\"\n                v-model=\"login_form.email\" />\n\n            <input\n                type=\"password\"\n                placeholder=\"Password\"\n                v-model=\"login_form.password\" />\n\n            <input\n                type=\"submit\"\n                value=\"login\" />\n\n        </form>\n\n        <form class=\"login\"></form>\n\n    </section>\n</main>\n","<template>\n  <header>\n    <b-navbar toggleable=\"sm\" type=\"dark\" variant=\"primary\">\n      <router-link class=\"navbar-brand\" exact to=\"/\">\n\n        <span class=\"navbar-brand-title d-sm-none d-md-inline\" style =\"font-size : 0px\" >START</span>\n      </router-link>\n\n      <!-- TODO: For XS breakpoint, this should be here...  -->\n      <!-- <ReloadControl class=\"mr-3\" /> -->\n      <b-navbar-toggle target=\"nav-collapse\"></b-navbar-toggle>\n\n      <b-collapse id=\"nav-collapse\" class=\"text-right text-md-center\" is-nav>\n        <b-navbar-nav>\n          <router-link v-if=\"!canRunBacktest\" class=\"nav-link navbar-nav\" to=\"/trade\" style =\"font-size : 0px\"\n            >Trading</router-link\n          >\n          <router-link v-if=\"!canRunBacktest\" class=\"nav-link navbar-nav\" to=\"/dashboard\" style =\"font-size : 0px\"\n            >Dashboard</router-link\n          >\n          <router-link class=\"nav-link navbar-nav\" to=\"/graph\" style =\"font-size : 0px\">Charts</router-link>\n\n          <router-link v-if=\"canRunBacktest\" class=\"nav-link navbar-nav\" to=\"/backtest\"\n            >Backtest</router-link>\n          <router-link v-if=\"!canRunBacktest\" class=\"nav-link navbar-nav\" to=\"/Per\" style =\"font-size : 0px\"\n            >Performance</router-link>\n        </b-navbar-nav>\n\n        <!-- Right aligned nav items -->\n         <b-navbar-nav class=\"ml-auto\" menu-class=\"w-100\">\n          <!-- TODO This should show outside of the dropdown in XS mode -->\n\n          <li v-if=\"hasBots\" class=\"nav-item\">\n            <!-- Hide dropdown on xs, instead show below  -->\n            <b-nav-item-dropdown right class=\"d-none d-sm-block\">\n              <template #button-content>\n                <b-avatar size=\"2em\" button>FT</b-avatar>\n              </template>\n\n              <router-link\n                v-if=\"botCount === 1\"\n                class=\"dropdown-item\"\n                to=\"/\"\n                @click.native=\"clickLogout()\"\n                >Sign Out</router-link\n              >\n            </b-nav-item-dropdown>\n            <div class=\"d-block d-sm-none\">\n              <!-- Visible only on XS -->\n              <li class=\"nav-item text-secondary ml-2 d-sm-none d-flex justify-content-between\">\n                <div class=\"d-flex\">\n                  <b-nav-text class=\"verticalCenter small mr-2\">\n                    {{ botName || 'No bot selected' }}\n                  </b-nav-text>\n                  <b-nav-text class=\"verticalCenter\">\n                    {{ isBotOnline ? 'Online' : 'Offline' }}\n                  </b-nav-text>\n                </div>\n              </li>\n\n              <router-link\n                v-if=\"botCount === 1\"\n                class=\"nav-link navbar-nav\"\n                to=\"/\"\n                @click.native=\"clickLogout()\"\n                >Sign Out</router-link\n              >\n            </div>\n          </li>\n          <li v-else>\n            <!-- should open Modal window! -->\n            <LoginModal />\n          </li>\n        </b-navbar-nav>\n      </b-collapse>\n    </b-navbar>\n  </header>\n</template>\n\n<template>\n\n    <main class=\"login2\">\n        <section class=\"forms\">\n            <form class=\"register\" @submit.prevent=\"register\">\n                <h2>Register</h2>\n                <input\n                    type=\"email\"\n                    placeholder=\"Email address\"\n                    v-model=\"register_form.email\" />\n\n                <input\n                    type=\"password\"\n                    placeholder=\"Password\"\n                    v-model=\"register_form.password\" />\n\n                <input\n                    type=\"submit\"\n                    value=\"Register\" />\n\n            </form>\n\n            <form class=\"login\" @submit.prevent=\"login\">\n                <h2>login</h2>\n                <input\n                    type=\"email\"\n                    placeholder=\"Email address\"\n                    v-model=\"login_form.email\" />\n\n                <input\n                    type=\"password\"\n                    placeholder=\"Password\"\n                    v-model=\"login_form.password\" />\n\n                <input\n                    type=\"submit\"\n                    value=\"login\" />\n\n            </form>\n\n            <form class=\"login\"></form>\n\n        </section>\n    </main>\n</template>\n\n<script>\nimport { ref } from \"@vue/composition-api\"\nimport { useStore } from '@vueblocks/vue-use-vuex'\nexport default {\n    setup () {\n        const login_form = ref({});\n        const register_form = ref({});\n        const store = useStore();\n\n        const login = () => {\n            store.dispatch('login', login_form.value);\n        }\n\n        const register = () => {\n            store.dispatch('register', register_form.value);\n        }\n\n        return{\n            login_form,\n            register_form,\n            login,\n            register\n\n        }\n    }\n\n}\n</script>\n\n<style>\nforms {\n    display: flex;\n    min_height: 1000vh;\n}\n\nfrom {\n    flex: 1 1 0%;\n    padding: 8rem 1rem 1rem;\n\n}\n\nform.register {\n    color: #FFF;\n    background-color: #000;\n    background-image: linear-gradient(\n        to bottom right,\n         #000 70%,\n        #fff 100%\n    );\n}\n\nform.login {\n    color: #FFF;\n    background-color: #000;\n    background-image: linear-gradient(\n        to bottom right,\n         #000 20%,\n        #fff 100%\n    );\n}\n\nh2 {\n\tfont-size: 2rem;\n\ttext-transform: uppercase;\n\tmargin-bottom: 2rem;\n}\ninput {\n\tappearance: none;\n\tborder: none;\n\toutline: none;\n\tbackground: none;\n\tdisplay: block;\n\twidth: 100%;\n\tmax-width: 500px;\n\tmargin: 0 auto;\n\tfont-size: 1.3rem;\n\tmargin-bottom: 2.5rem;\n\tpadding: 1.1rem 1rem;\n}\ninput:not([type=\"submit\"]) {\n\topacity: 0.9;\n\ttransition: 0.4s;\n}\ninput:focus:not([type=\"submit\"]) {\n\topacity: 2;\n}\ninput::placeholder {\n\tcolor: inherit;\n}\nform.register input:not([type=\"submit\"]) {\n\tcolor: #FFF;\n\tborder-bottom: 2px solid #FFF;\n}\nform.login input:not([type=\"submit\"]) {\n\tcolor: #FFF;\n\tborder-bottom: 3px solid #FFF;\n}\nform.login input[type=\"submit\"] {\n\tbackground-color: #000;\n\tcolor: #FFF;\n\tfont-weight: 700;\n\tpadding: 1rem 2rem;\n\tborder-radius: 1.9rem;\n\tcursor: pointer;\n\ttext-transform: uppercase;\n}\nform.register input[type=\"submit\"] {\n\tbackground-color: #FFF;\n\tcolor: #000;\n\tfont-weight: 700;\n\tpadding: 1rem 2rem;\n\tborder-radius: 2rem;\n\tcursor: pointer;\n\ttext-transform: uppercase;\n}\n</style>\n"],"names":["VueCompositionAPI"],"mappings":"qEAGA,WAAiB,EAAM,CACrB,EAAO,GAAQ,EACX,GAAQ,CAAC,EAAK,+BAChB,EAAI,IAAIA,GAGZ,EAAQ,GCTR;AAAA;AAAA;AAAA;AAAA,GA0MA,KAAM,GAAW,IAAM,CACnB,KAAM,GAAW,IACjB,MAAK,IACD,QAAQ,MAAM,0DAEoB,EAAS,MAAM,QC/MzD,GAAI,GAAS,UAAY,CAAC,GAAI,GAAI,KAAS,EAAG,EAAI,eAAmB,EAAG,EAAI,MAAM,IAAI,EAAG,MAAO,GAAG,OAAO,CAAC,YAAY,UAAU,CAAC,EAAG,UAAU,CAAC,YAAY,SAAS,CAAC,EAAG,OAAO,CAAC,YAAY,WAAW,GAAG,CAAC,OAAS,SAAS,EAAO,CAAC,SAAO,iBAAwB,EAAI,SAAS,MAAM,KAAM,cAAc,CAAC,EAAG,KAAK,CAAC,EAAI,GAAG,cAAc,EAAG,QAAQ,CAAC,WAAW,CAAC,CAAC,KAAK,QAAQ,QAAQ,UAAU,MAAO,EAAI,cAAc,MAAO,WAAW,wBAAwB,MAAM,CAAC,KAAO,QAAQ,YAAc,iBAAiB,SAAS,CAAC,MAAS,EAAI,cAAc,OAAQ,GAAG,CAAC,MAAQ,SAAS,EAAO,CAAC,AAAG,EAAO,OAAO,WAAqB,EAAI,KAAK,EAAI,cAAe,QAAS,EAAO,OAAO,WAAW,EAAG,QAAQ,CAAC,WAAW,CAAC,CAAC,KAAK,QAAQ,QAAQ,UAAU,MAAO,EAAI,cAAc,SAAU,WAAW,2BAA2B,MAAM,CAAC,KAAO,WAAW,YAAc,YAAY,SAAS,CAAC,MAAS,EAAI,cAAc,UAAW,GAAG,CAAC,MAAQ,SAAS,EAAO,CAAC,AAAG,EAAO,OAAO,WAAqB,EAAI,KAAK,EAAI,cAAe,WAAY,EAAO,OAAO,WAAW,EAAG,QAAQ,CAAC,MAAM,CAAC,KAAO,SAAS,MAAQ,gBAAgB,EAAG,OAAO,CAAC,YAAY,QAAQ,GAAG,CAAC,OAAS,SAAS,EAAO,CAAC,SAAO,iBAAwB,EAAI,MAAM,MAAM,KAAM,cAAc,CAAC,EAAG,KAAK,CAAC,EAAI,GAAG,WAAW,EAAG,QAAQ,CAAC,WAAW,CAAC,CAAC,KAAK,QAAQ,QAAQ,UAAU,MAAO,EAAI,WAAW,MAAO,WAAW,qBAAqB,MAAM,CAAC,KAAO,QAAQ,YAAc,iBAAiB,SAAS,CAAC,MAAS,EAAI,WAAW,OAAQ,GAAG,CAAC,MAAQ,SAAS,EAAO,CAAC,AAAG,EAAO,OAAO,WAAqB,EAAI,KAAK,EAAI,WAAY,QAAS,EAAO,OAAO,WAAW,EAAG,QAAQ,CAAC,WAAW,CAAC,CAAC,KAAK,QAAQ,QAAQ,UAAU,MAAO,EAAI,WAAW,SAAU,WAAW,wBAAwB,MAAM,CAAC,KAAO,WAAW,YAAc,YAAY,SAAS,CAAC,MAAS,EAAI,WAAW,UAAW,GAAG,CAAC,MAAQ,SAAS,EAAO,CAAC,AAAG,EAAO,OAAO,WAAqB,EAAI,KAAK,EAAI,WAAY,WAAY,EAAO,OAAO,WAAW,EAAG,QAAQ,CAAC,MAAM,CAAC,KAAO,SAAS,MAAQ,aAAa,EAAG,OAAO,CAAC,YAAY,eACj+D,EAAkB,GACtB,EAAO,cAAgB,GC8HvB"}