{"version":3,"file":"index.3277bc57.js","sources":["../../vite/modulepreload-polyfill","../../src/plugins/bootstrap-vue.ts","../../src/plugins/composition_api.ts","../../src/shared/userService.ts","../../src/store/storeSubModules.ts","../../src/shared/apiService.ts","../../src/types/backtest.ts","../../src/types/plot.ts","../../src/types/types.ts","../../src/shared/storage.ts","../../src/shared/apiParamParser.ts","../../src/store/modules/ftbot/state.ts","../../src/store/modules/alerts.ts","../../src/store/modules/ftbot/index.ts","../../src/store/modules/botStoreWrapper.ts","../../src/components/Login.vue","../../src/components/Login.vue?vue&type=template&lang.js","../../src/views/LoginModal.vue","../../src/views/LoginModal.vue?vue&type=template&lang.js","../../vite/preload-helper","../../src/shared/themes.ts","../../src/components/BootswatchThemeSelect.vue","../../src/components/BootswatchThemeSelect.vue?vue&type=template&lang.js","../../src/store/modules/layout.ts","../../src/shared/formatters.ts","../../src/store/modules/settings.ts","../../src/components/ftbot/ReloadControl.vue","../../src/components/ftbot/ReloadControl.vue?vue&type=template&lang.js","../../src/components/BotEntry.vue","../../src/components/BotEntry.vue?vue&type=template&lang.js","../../src/components/BotList.vue","../../src/components/BotList.vue?vue&type=template&lang.js","../../src/components/layout/NavBar.vue","../../src/components/layout/NavBar.vue?vue&type=template&lang.js","../../src/components/layout/NavFooter.vue","../../src/components/layout/NavFooter.vue?vue&type=template&lang.js","../../src/components/ftbot/BotAlerts.vue","../../src/components/ftbot/BotAlerts.vue?vue&type=template&lang.js","../../src/components/layout/Body.vue","../../src/components/layout/Body.vue?vue&type=template&lang.js","../../src/App.vue","../../src/App.vue?vue&type=template&lang.js","../../src/views/Home.vue","../../src/assets/Robot.png","../../src/views/Home.vue?vue&type=template&lang.js","../../src/views/Error404.vue?vue&type=template&lang.js","../../src/firebase/index.js","../../src/router/index.ts","../../src/store/index.ts","../../src/main.ts"],"sourcesContent":["const p = function polyfill() {\n    const relList = document.createElement('link').relList;\n    if (relList && relList.supports && relList.supports('modulepreload')) {\n        return;\n    }\n    for (const link of document.querySelectorAll('link[rel=\"modulepreload\"]')) {\n        processPreload(link);\n    }\n    new MutationObserver((mutations) => {\n        for (const mutation of mutations) {\n            if (mutation.type !== 'childList') {\n                continue;\n            }\n            for (const node of mutation.addedNodes) {\n                if (node.tagName === 'LINK' && node.rel === 'modulepreload')\n                    processPreload(node);\n            }\n        }\n    }).observe(document, { childList: true, subtree: true });\n    function getFetchOpts(script) {\n        const fetchOpts = {};\n        if (script.integrity)\n            fetchOpts.integrity = script.integrity;\n        if (script.referrerpolicy)\n            fetchOpts.referrerPolicy = script.referrerpolicy;\n        if (script.crossorigin === 'use-credentials')\n            fetchOpts.credentials = 'include';\n        else if (script.crossorigin === 'anonymous')\n            fetchOpts.credentials = 'omit';\n        else\n            fetchOpts.credentials = 'same-origin';\n        return fetchOpts;\n    }\n    function processPreload(link) {\n        if (link.ep)\n            // ep marker = processed\n            return;\n        link.ep = true;\n        // prepopulate the load record\n        const fetchOpts = getFetchOpts(link);\n        fetch(link.href, fetchOpts);\n    }\n};__VITE_IS_MODERN__&&p();","import Vue from 'vue';\n\nimport BootstrapVue from 'bootstrap-vue';\n\nimport '@/styles/main.scss';\n\nVue.use(BootstrapVue);\n","import Vue from 'vue';\nimport VueCompositionAPI from '@vue/composition-api';\n\nVue.use(VueCompositionAPI);\n","import axios, { AxiosResponse } from 'axios';\n\nimport { AuthPayload, AuthResponse, BotDescriptors, AuthStorage, AuthStorageMulti } from '@/types';\n\nconst AUTH_LOGIN_INFO = 'ftAuthLoginInfo';\nconst APIBASE = '/api/v1';\n\nexport class UserService {\n  private botId: string;\n\n  constructor(botId: string) {\n    console.log('botId', botId);\n    this.botId = botId;\n  }\n\n  /**\n   * Stores info for current botId in the object of all bots.\n   */\n  private storeLoginInfo(loginInfo: AuthStorage): void {\n    const allInfo = UserService.getAllLoginInfos();\n    allInfo[this.botId] = loginInfo;\n    localStorage.setItem(AUTH_LOGIN_INFO, JSON.stringify(allInfo));\n  }\n\n  /**\n   * Logout - removing info for this particular bot.\n   */\n  private removeLoginInfo(): void {\n    const info = UserService.getAllLoginInfos();\n    delete info[this.botId];\n    localStorage.setItem(AUTH_LOGIN_INFO, JSON.stringify(info));\n  }\n\n  private setAccessToken(token: string): void {\n    const loginInfo = this.getLoginInfo();\n    loginInfo.accessToken = token;\n    this.storeLoginInfo(loginInfo);\n  }\n\n  /**\n   * Store autorefresh preference for this bot instance\n   * @param autoRefresh new autoRefresh value\n   */\n  public setAutoRefresh(autoRefresh: boolean): void {\n    const loginInfo = this.getLoginInfo();\n    loginInfo.autoRefresh = autoRefresh;\n    this.storeLoginInfo(loginInfo);\n  }\n\n  /**\n   * Retrieve full logininfo object (for all registered bots)\n   * @returns\n   */\n  private static getAllLoginInfos(): AuthStorageMulti {\n    const info = JSON.parse(localStorage.getItem(AUTH_LOGIN_INFO) || '{}');\n    return info;\n  }\n\n  /**\n   * Retrieve Login info object for the given bot\n   * @returns Login Info object\n   */\n  private getLoginInfo(): AuthStorage {\n    const info = UserService.getAllLoginInfos();\n    if (this.botId in info && 'apiUrl' in info[this.botId] && 'refreshToken' in info[this.botId]) {\n      return info[this.botId];\n    }\n    return {\n      botName: '',\n      apiUrl: '',\n      refreshToken: '',\n      accessToken: '',\n      autoRefresh: false,\n    };\n  }\n\n  public static getAvailableBots(): BotDescriptors {\n    const allInfo = UserService.getAllLoginInfos();\n    const response: BotDescriptors = {};\n    Object.entries(allInfo).forEach(([k, v]) => {\n      response[k] = {\n        botId: k,\n        botName: v.botName,\n        botUrl: v.apiUrl,\n      };\n    });\n    return response;\n  }\n\n  public static getAvailableBotList(): string[] {\n    const allInfo = UserService.getAllLoginInfos();\n    return Object.keys(allInfo);\n  }\n\n  public getAutoRefresh(): boolean {\n    return this.getLoginInfo().autoRefresh;\n  }\n\n  public getAccessToken(): string {\n    return this.getLoginInfo().accessToken;\n  }\n\n  private getRefreshToken() {\n    return this.getLoginInfo().refreshToken;\n  }\n\n  public loggedIn() {\n    return this.getLoginInfo().refreshToken !== '';\n  }\n\n  private getAPIUrl(): string {\n    return this.getLoginInfo().apiUrl;\n  }\n\n  public logout(): void {\n    console.log('Logging out');\n\n    this.removeLoginInfo();\n  }\n\n  public async login(auth: AuthPayload) {\n    //  Login using username / password\n    const { data } = await axios.post<{}, AxiosResponse<AuthResponse>>(\n      `${auth.url}/api/v1/token/login`,\n      {},\n      {\n        auth: { ...auth },\n      },\n    );\n    if (data.access_token && data.refresh_token) {\n      const obj: AuthStorage = {\n        botName: auth.botName,\n        apiUrl: auth.url,\n        accessToken: data.access_token || '',\n        refreshToken: data.refresh_token || '',\n        autoRefresh: true,\n      };\n      this.storeLoginInfo(obj);\n    }\n  }\n\n  public refreshToken(): Promise<string> {\n    console.log('Refreshing token...');\n    const token = this.getRefreshToken();\n    return new Promise((resolve, reject) => {\n      axios\n        .post<{}, AxiosResponse<AuthResponse>>(\n          `${this.getAPIUrl()}${APIBASE}/token/refresh`,\n          {},\n          {\n            headers: { Authorization: `Bearer ${token}` },\n          },\n        )\n        .then((response) => {\n          if (response.data.access_token) {\n            this.setAccessToken(response.data.access_token);\n            // Return plain access token\n            resolve(response.data.access_token);\n          }\n        })\n        .catch((err) => {\n          console.error(err);\n          if (err.response && err.response.status === 401) {\n            // in case of errors when using the refresh token - logout.\n            this.logout();\n          } else if (err.response && (err.response.status === 500 || err.response.status === 404)) {\n            console.log('Bot seems to be offline... - retrying later');\n            reject(err);\n          }\n        });\n    });\n  }\n\n  public getBaseUrl(): string {\n    const baseURL = this.getAPIUrl();\n    if (baseURL === null) {\n      // Relative url\n      return APIBASE;\n    }\n    if (!baseURL.endsWith(APIBASE)) {\n      return `${baseURL}${APIBASE}`;\n    }\n    return `${baseURL}${APIBASE}`;\n  }\n\n  /**\n   * Call on startup to migrate old login info to new login\n   */\n  public static migrateLogin() {\n    // TODO: this is actually never called!\n    const AUTH_REFRESH_TOKEN = 'auth_ref_token'; // Legacy key - do not use\n    const AUTH_ACCESS_TOKEN = 'auth_access_token';\n    const AUTH_API_URL = 'auth_api_url';\n    const AUTO_REFRESH = 'ft_auto_refresh';\n\n    const apiUrl = JSON.parse(localStorage.getItem(AUTH_API_URL) || '{}');\n    const refreshToken = JSON.parse(localStorage.getItem(AUTH_REFRESH_TOKEN) || '{}');\n    const accessToken = JSON.parse(localStorage.getItem(AUTH_ACCESS_TOKEN) || '{}');\n    const autoRefresh: boolean = JSON.parse(localStorage.getItem(AUTO_REFRESH) || '{}');\n    if (\n      typeof apiUrl === 'string' &&\n      typeof refreshToken === 'string' &&\n      typeof accessToken === 'string'\n    ) {\n      const loginInfo: AuthStorage = {\n        botName: '',\n        apiUrl,\n        refreshToken,\n        accessToken,\n        autoRefresh,\n      };\n      const x = new UserService('ftbot.0');\n      x.storeLoginInfo(loginInfo);\n    }\n\n    localStorage.removeItem(AUTH_REFRESH_TOKEN);\n    localStorage.removeItem(AUTH_ACCESS_TOKEN);\n    localStorage.removeItem(AUTH_API_URL);\n    localStorage.removeItem(AUTO_REFRESH);\n  }\n}\n\nexport function useUserService(botId: string) {\n  const userservice = new UserService(botId);\n  return userservice;\n}\n","// eslint-disable-next-line @typescript-eslint/no-unused-vars\nenum StoreModules {\n  ftbot = 'ftbot',\n  alerts = 'alerts',\n  layout = 'layout',\n  uiSettings = 'uiSettings',\n}\n\nexport default StoreModules;\n","import axios from 'axios';\nimport { UserService } from './userService';\n\n/**\n * Global store variable - keep a reference here to be able to emmit alerts\n */\nlet globalStore;\n\nexport function useApi(userService: UserService, botId: string) {\n  const api = axios.create({\n    baseURL: userService.getBaseUrl(),\n    timeout: 10000,\n    withCredentials: true,\n  });\n  // Sent auth headers interceptor\n  api.interceptors.request.use(\n    (config) => {\n      const custconfig = config;\n      const token = userService.getAccessToken();\n      // Append token to each request\n      if (token) {\n        // Merge custconfig dicts\n        custconfig.headers = { ...config.headers, ...{ Authorization: `Bearer ${token}` } };\n      }\n      return custconfig;\n    },\n    (error) => Promise.reject(error),\n  );\n\n  api.interceptors.response.use(\n    (response) => response,\n    (err) => {\n      // console.log(err);\n      if (err.response && err.response.status === 401) {\n        console.log('Dispatching refresh_token...');\n        return userService\n          .refreshToken()\n          .then((token) => {\n            // Retry original request with new token\n            const { config } = err;\n            config.headers.Authorization = `Bearer ${token}`;\n\n            return new Promise((resolve, reject) => {\n              axios\n                .request(config)\n                .then((response) => {\n                  resolve(response);\n                })\n                .catch((error) => {\n                  reject(error);\n                });\n            });\n          })\n          .catch((error) => {\n            console.log('No new token received');\n            console.log(error);\n          });\n\n        // maybe redirect to /login if needed !\n      }\n      if ((err.response && err.response.status === 500) || err.message === 'Network Error') {\n        console.log('Bot not running...');\n        globalStore.dispatch(`ftbot/${botId}/setIsBotOnline`, false);\n      }\n\n      return new Promise((resolve, reject) => {\n        reject(err);\n      });\n    },\n  );\n\n  return {\n    api,\n  };\n}\n\n/**\n * Initialize api so store is accessible.\n * @param store Vuex store\n */\nexport function initApi(store) {\n  globalStore = store;\n  //\n}\n","import { Lock } from './locks';\nimport { Trade } from './trades';\n\nexport interface BacktestPayload {\n  strategy: string;\n  timerange: string;\n  timeframe?: string;\n  timeframe_detail?: string;\n  max_open_trades?: number;\n  // TODO: Should be number or unlimited\n  stake_amount?: string;\n  dry_run_wallet?: number;\n  enable_protections?: boolean;\n}\n\nexport interface PairResult {\n  draws: number;\n  duration_avg: string;\n  key: string;\n  losses: number;\n  profit_mean: number;\n  profit_mean_pct: number;\n  profit_sum: number;\n  profit_sum_pct: number;\n  profit_total_abs: number;\n  profit_total_pct: number;\n  profit_total: number;\n  trades: number;\n  wins: number;\n}\n\nexport interface SellReasonResults {\n  draws: number;\n  losses: number;\n  profit_mean: number;\n  profit_mean_pct: number;\n  profit_sum: number;\n  profit_sum_pct: number;\n  profit_total_abs: number;\n  /** Total profit as ratio */\n  profit_total: number;\n  /** Total profit in percent */\n  profit_total_pct: number;\n  trades: number;\n  wins: number;\n}\n\nexport interface StrategyBacktestResult {\n  trades: Trade[];\n  locks: Lock[];\n  best_pair: PairResult;\n  worst_pair: PairResult;\n  results_per_pair: Array<PairResult>;\n  sell_reason_summary: Array<SellReasonResults>;\n  left_open_trades: Trade[];\n  total_trades: number;\n  total_volume: number;\n  avg_stake_amount: number;\n  profit_mean: number;\n  profit_total: number;\n  profit_total_abs: number;\n\n  backtest_end: string;\n  backtest_end_ts: number;\n  backtest_start: string;\n  backtest_start_ts: number;\n  backtest_days: number;\n  backtest_best_day: number;\n  backtest_worst_day: number;\n  backtest_best_day_abs: number;\n  backtest_worst_day_abs: number;\n\n  trades_per_day: number;\n  market_change: number;\n  pairlist: string[];\n  stake_amount: number;\n  stake_currency: string;\n  /** Decimal places to use when displaying values in stake-currency */\n  stake_currency_decimals: number;\n  starting_balance: number;\n  final_balance: number;\n\n  max_open_trades: number;\n  timeframe: string;\n  timeframe_detail?: string;\n  timerange: string;\n  strategy_name: string;\n  enable_protections: boolean;\n  stoploss: number;\n  trailing_stop: boolean;\n  trailing_stop_positive?: number;\n  trailing_stop_positive_offset?: number;\n  trailing_only_offset_is_reached: boolean;\n  use_custom_stoploss: boolean;\n  minimal_roi: Record<string, number>;\n  use_sell_signal: boolean;\n  sell_profit_only: boolean;\n  sell_profit_offset: number;\n  rejected_signals: number;\n\n  // Daily stats ...\n  draw_days: number;\n  drawdown_end: string;\n  drawdown_end_ts: number;\n  drawdown_start: string;\n  drawdown_start_ts: number;\n  loser_holding_avg: number;\n  losing_days: number;\n  max_drawdown: number;\n  /** Absolute max drawdown */\n  max_drawdown_abs: number;\n  max_drawdown_low: number;\n  max_drawdown_high: number;\n\n  csum_min: number;\n  csum_max: number;\n\n  winner_holding_avg: number;\n  winning_days: number;\n\n  /** Start time of the backtest run */\n  backtest_run_start_ts: number;\n  /** End time of the backtest run */\n  backtest_run_end_ts: number;\n}\n\nexport interface BacktestResult {\n  strategy: Record<string, StrategyBacktestResult>;\n  strategy_comparison: Array<Record<string, string | number>>;\n}\n\nexport enum BacktestSteps {\n  startup,\n  dataload,\n  analyze,\n  convert,\n  backtest,\n  none = '',\n}\n\nexport interface BacktestStatus {\n  status: string;\n  running: boolean;\n  status_msg: string;\n  step: BacktestSteps;\n  progress: number;\n  trade_count?: number;\n  backtest_result?: BacktestResult;\n}\n","export enum ChartType {\n  line = 'line',\n  bar = 'bar',\n  scatter = 'scatter',\n}\n\nexport interface IndicatorConfig {\n  color?: string;\n  type?: ChartType;\n}\n\nexport interface PlotConfig {\n  main_plot: Record<string, IndicatorConfig>;\n  subplots: Record<string, Record<string, IndicatorConfig>>;\n}\n\nexport interface PlotConfigStorage {\n  [key: string]: PlotConfig;\n}\n\n// eslint-disable-next-line @typescript-eslint/camelcase\nexport const EMPTY_PLOTCONFIG: PlotConfig = { main_plot: {}, subplots: {} };\n","export enum OrderSides {\n  long = 'long',\n  short = 'short',\n}\n\nexport interface ForceEnterPayload {\n  pair: string;\n  side?: OrderSides;\n  price?: number;\n  ordertype?: string;\n  stakeamount?: number;\n}\n\nexport interface ForceSellPayload {\n  tradeid: string;\n  ordertype?: string;\n}\n\n/** Interface only used internally to ensure the right bot is being called in a multibot environment. */\nexport interface MultiForcesellPayload extends ForceSellPayload {\n  botId: string;\n}\n\n/** Interface only used internally to ensure the right bot is being called in a multibot environment. */\nexport interface MultiDeletePayload {\n  tradeid: string;\n  botId: string;\n}\n\nexport interface PerformanceEntry {\n  count: number;\n  pair: string;\n  profit: number;\n  // TODO: profit_abs is mandatory after 2021.5\n  profit_abs?: number;\n}\n\nexport type LogLine = Array<[string, number, string, string, string]>;\n\nexport interface Logs {\n  /**\n   * Array of Logs\n   * Log format:\n   * [Formatted datetime, timestamp, Module, LogLevel, Message]\n   */\n  logs: LogLine[];\n  log_count: number;\n}\n\n/** Values for BotState.state */\nexport enum BotStates {\n  RUNNING = 'running',\n  STOPPED = 'stopped',\n  RELOAD_CONFIG = 'reload_config',\n}\n\nexport enum RunModes {\n  LIVE = 'live',\n  DRY_RUN = 'dry_run',\n  BACKTEST = 'backtest',\n  EDGE = 'edge',\n  HYPEROPT = 'hyperopt',\n  UTIL_EXCHANGE = 'util_exchange',\n  UTIL_NO_EXCHANGE = 'util_no_exchange',\n  PLOT = 'plot',\n  WEBSERVER = 'webserver',\n  OTHER = 'other',\n}\n\nexport interface UnfilledTimeout {\n  buy: number;\n  sell: number;\n  unit: string;\n  exit_timeout_count: number;\n}\n\nexport interface OrderTypes {\n  buy: string;\n  sell: string;\n  emergencysell?: string;\n  forcesell?: string;\n  forcebuy?: string;\n  stoploss: string;\n  stoploss_on_exchange: boolean;\n  stoploss_on_exchange_interval: number;\n}\n\nexport interface PriceBase {\n  price_side: string;\n  use_order_book: boolean;\n  order_book_top: number;\n}\n\nexport interface AskStrategy extends PriceBase {\n  bid_last_balance?: number;\n}\n\nexport interface BidStrategy extends PriceBase {\n  ask_last_balance?: number;\n  check_depth_of_market: object;\n}\n\nexport interface BotState {\n  version: string;\n  strategy_version?: string;\n  /** Api version - was not provided prior to 1.1 (or 2021.11) */\n  api_version?: number;\n  dry_run: boolean;\n  trading_mode?: string;\n  short_allowed?: boolean;\n  state: BotStates;\n  runmode: RunModes;\n  bid_strategy: BidStrategy;\n  ask_strategy: AskStrategy;\n  unfilledtimeout: UnfilledTimeout;\n  order_types: OrderTypes;\n  exchange: string;\n  forcebuy_enabled: boolean;\n  max_open_trades: number;\n  minimal_roi: object;\n  stake_amount: string;\n  stake_currency: string;\n  stake_currency_decimals?: number;\n  available_balance?: number;\n  stoploss: number;\n  strategy: string;\n  /** Timeframe in readable form (e.g. 5m) */\n  timeframe: string;\n  /** Timeframe in milliseconds */\n  timeframe_ms: number;\n  /** Timeframe in Minutes */\n  timeframe_min: number;\n  /** Given name of the bot */\n  bot_name: string;\n\n  trailing_only_offset_is_reached: boolean;\n  trailing_stop: boolean;\n  trailing_stop_positive: number;\n  trailing_stop_positive_offset: number;\n\n  position_adjustment_enable?: boolean;\n  max_entry_position_adjustment?: number;\n}\n\nexport interface StrategyListResult {\n  strategies: string[];\n}\n\nexport interface StrategyResult {\n  /** Strategy name */\n  strategy: string;\n  /** Code of the strategy class */\n  code: string;\n}\n\nexport interface AvailablePairPayload {\n  timeframe?: string;\n  stake_currency?: string;\n}\n\nexport interface AvailablePairResult {\n  pairs: string[];\n  /**\n   * List of lists, as [pair, timeframe]\n   */\n  pair_interval: Array<Array<string>>;\n  length: number;\n}\n\nexport interface PairCandlePayload {\n  pair: string;\n  timeframe: string;\n  limit?: number;\n}\n\nexport interface PairHistoryPayload {\n  pair: string;\n  timeframe: string;\n  timerange: string;\n  strategy: string;\n}\n\nexport interface PairHistory {\n  strategy: string;\n  pair: string;\n  timeframe: string;\n  timeframe_ms: number;\n  columns: string[];\n  data: number[];\n  length: number;\n  /** Number of buy signals in this response */\n  buy_signals: number;\n  /** Number of sell signals in this response */\n  sell_signals: number;\n\n  /** Number of long entry signals in this response */\n  enter_long_signals?: number;\n  /** Number of long exit signals in this response */\n  exit_long_signals?: number;\n  /** Number of short entry signals in this response */\n  enter_short_signals?: number;\n  /** Number of short exit signals in this response */\n  exit_short_signals?: number;\n\n  last_analyzed: number;\n  /** Data start date in as millisecond timestamp */\n  data_start_ts: number;\n  /** Data start date in in the format YYYY-MM-DD HH24:MI:SS+00:00 */\n  data_start: string;\n  /** End date in in the format YYYY-MM-DD HH24:MI:SS+00:00 */\n  data_stop: string;\n  /** Data end date in as millisecond timestamp */\n  data_stop_ts: number;\n}\n\nexport interface SysInfoResponse {\n  cpu_pct: number[];\n  ram_pct: number;\n}\n\nexport interface HealthResponse {\n  last_process: string;\n  last_process_ts: number;\n}\n\nexport interface StatusResponse {\n  status: string;\n}\n\nexport interface DeleteTradeResponse {\n  cancel_order_count: number;\n  result: string;\n  result_msg: string;\n  trade_id: number;\n}\n\nexport interface UiVersion {\n  version: string;\n}\n\nexport type LoadingStatus = 'loading' | 'success' | 'error';\n","import { PlotConfig, EMPTY_PLOTCONFIG, PlotConfigStorage } from '@/types';\n\nconst PLOT_CONFIG = 'ft_custom_plot_config';\nconst PLOT_CONFIG_NAME = 'ft_selected_plot_config';\n\nexport function getPlotConfigName(): string {\n  return localStorage.getItem(PLOT_CONFIG_NAME) || 'default';\n}\n\nexport function storePlotConfigName(plotConfigName: string): void {\n  localStorage.setItem(PLOT_CONFIG_NAME, plotConfigName);\n}\n\nexport function getAllCustomPlotConfig(): PlotConfig {\n  return JSON.parse(localStorage.getItem(PLOT_CONFIG) || '{}');\n}\n\nexport function getAllPlotConfigNames(): Array<string> {\n  return Object.keys(getAllCustomPlotConfig());\n}\n\nexport function getCustomPlotConfig(configName: string): PlotConfig {\n  const configs = getAllCustomPlotConfig();\n  return configName in configs ? configs[configName] : { ...EMPTY_PLOTCONFIG };\n}\n\nexport function storeCustomPlotConfig(plotConfig: PlotConfigStorage) {\n  const existingConfig = getAllCustomPlotConfig();\n  // Merge existing with new config\n  const finalPlotConfig = { ...existingConfig, ...plotConfig };\n\n  localStorage.setItem(PLOT_CONFIG, JSON.stringify(finalPlotConfig));\n  // Store new config name as default\n  storePlotConfigName(Object.keys(plotConfig)[0]);\n}\n","/** Parse api Query parameters\n * so that an array is correctly exploded into seperate items.\n */\nexport const parseParams = (params) => {\n  const keys = Object.keys(params);\n  let options = '';\n\n  keys.forEach((key) => {\n    const isParamTypeObject = typeof params[key] === 'object';\n    const isParamTypeArray = isParamTypeObject && params[key].length >= 0;\n\n    if (!isParamTypeObject) {\n      options += `${key}=${params[key]}&`;\n    }\n\n    if (isParamTypeObject && isParamTypeArray) {\n      params[key].forEach((element) => {\n        options += `${key}=${element}&`;\n      });\n    }\n  });\n\n  return options ? options.slice(0, -1) : options;\n};\n","import { getPlotConfigName, getAllPlotConfigNames } from '@/shared/storage';\n\nimport {\n  BotState,\n  Trade,\n  PlotConfig,\n  StrategyResult,\n  BalanceInterface,\n  DailyReturnValue,\n  LockResponse,\n  PlotConfigStorage,\n  ProfitInterface,\n  BacktestResult,\n  StrategyBacktestResult,\n  BacktestSteps,\n  LogLine,\n  SysInfoResponse,\n  LoadingStatus,\n} from '@/types';\n\nexport interface FtbotStateType {\n  ping: string;\n  isBotOnline: boolean;\n  autoRefresh: boolean;\n  refreshing: boolean;\n  version: string;\n  lastLogs: LogLine[];\n  refreshRequired: boolean;\n  trades: Trade[];\n  openTrades: Trade[];\n  tradeCount: number;\n  performanceStats: Performance[];\n  whitelist: string[];\n  blacklist: string[];\n  profit: ProfitInterface | {};\n  botState?: BotState;\n  balance: BalanceInterface | {};\n  dailyStats: DailyReturnValue | {};\n  pairlistMethods: string[];\n  detailTradeId?: number;\n  selectedPair: string;\n  // TODO: type me\n  candleData: {};\n  candleDataStatus: LoadingStatus;\n  // TODO: type me\n  history: {};\n  historyStatus: LoadingStatus;\n  strategyPlotConfig?: PlotConfig;\n  customPlotConfig: PlotConfigStorage;\n  plotConfigName: string;\n  availablePlotConfigNames: string[];\n  strategyList: string[];\n  strategy: StrategyResult | {};\n  pairlist: string[];\n  currentLocks?: LockResponse;\n  backtestRunning: boolean;\n  backtestProgress: number;\n  backtestStep: BacktestSteps;\n  backtestTradeCount: number;\n  backtestResult?: BacktestResult;\n  selectedBacktestResultKey: string;\n  backtestHistory: Record<string, StrategyBacktestResult>;\n  sysinfo: SysInfoResponse | {};\n}\n\nconst state = (): FtbotStateType => {\n  return {\n    ping: '',\n    isBotOnline: false,\n    autoRefresh: false,\n    refreshing: false,\n    version: '',\n    lastLogs: [],\n    refreshRequired: true,\n    trades: [],\n    openTrades: [],\n    tradeCount: 0,\n    performanceStats: [],\n    whitelist: [],\n    blacklist: [],\n    profit: {},\n    botState: undefined,\n    balance: {},\n    dailyStats: {},\n    pairlistMethods: [],\n    detailTradeId: undefined,\n    selectedPair: '',\n    candleData: {},\n    candleDataStatus: 'loading',\n    history: {},\n    historyStatus: 'loading',\n    strategyPlotConfig: undefined,\n    customPlotConfig: {},\n    plotConfigName: getPlotConfigName(),\n    availablePlotConfigNames: getAllPlotConfigNames(),\n    strategyList: [],\n    strategy: {},\n    pairlist: [],\n    currentLocks: undefined,\n    // backtesting\n    backtestRunning: false,\n    backtestProgress: 0.0,\n    backtestStep: BacktestSteps.none,\n    backtestTradeCount: 0,\n    backtestResult: undefined,\n    selectedBacktestResultKey: '',\n    backtestHistory: {},\n    sysinfo: {},\n  };\n};\nexport default state;\n","import { AlertType } from '@/types/alertTypes';\n\nexport enum AlertActions {\n  addAlert = 'addAlert',\n  removeAlert = 'removeAlert',\n}\n\nexport enum AlertMutations {\n  addAlert = 'addAlert',\n  removeAlert = 'removeAlert',\n}\n\nexport default {\n  namespaced: true,\n  state: {\n    activeMessages: [],\n  },\n  mutations: {\n    [AlertMutations.addAlert](state, message: AlertType) {\n      console.log(`adding message '${message.message}' to message queue`);\n      state.activeMessages.push(message);\n    },\n    [AlertMutations.removeAlert](state) {\n      state.activeMessages.shift();\n    },\n  },\n  actions: {\n    [AlertActions.addAlert]({ commit }, message: AlertType) {\n      commit(AlertMutations.addAlert, message);\n    },\n    [AlertActions.removeAlert]({ commit }) {\n      commit(AlertMutations.removeAlert);\n    },\n  },\n};\n\nexport function showAlert(dispatch, message: string, severity = '') {\n  dispatch(`alerts/${AlertActions.addAlert}`, { message, severity }, { root: true });\n}\n","import { useApi } from '@/shared/apiService';\nimport { useUserService } from '@/shared/userService';\n\nimport {\n  BacktestResult,\n  BotState,\n  BlacklistPayload,\n  ForceEnterPayload,\n  Logs,\n  DailyPayload,\n  Trade,\n  PairCandlePayload,\n  PairHistoryPayload,\n  PlotConfig,\n  StrategyListResult,\n  EMPTY_PLOTCONFIG,\n  AvailablePairPayload,\n  PlotConfigStorage,\n  WhitelistResponse,\n  StrategyResult,\n  BalanceInterface,\n  DailyReturnValue,\n  LockResponse,\n  Lock,\n  RunModes,\n  TradeResponse,\n  StrategyBacktestResult,\n  BacktestStatus,\n  ProfitInterface,\n  PairHistory,\n  LogLine,\n  BacktestSteps,\n  SysInfoResponse,\n  AvailablePairResult,\n  StatusResponse,\n  DeleteTradeResponse,\n  BlacklistResponse,\n  ForceSellPayload,\n  LoadingStatus,\n} from '@/types';\n\nimport {\n  storeCustomPlotConfig,\n  getAllPlotConfigNames,\n  storePlotConfigName,\n} from '@/shared/storage';\nimport axios, { AxiosInstance, AxiosResponse } from 'axios';\n\nimport { parseParams } from '@/shared/apiParamParser';\nimport StoreModules from '@/store/storeSubModules';\nimport state, { FtbotStateType } from './state';\nimport { showAlert } from '../alerts';\n\nexport enum BotStoreGetters {\n  botName = 'botName',\n  isBotOnline = 'isBotOnline',\n\n  autoRefresh = 'autoRefresh',\n  refreshNow = 'refreshNow',\n  refreshing = 'refreshing',\n\n  openTrades = 'openTrades',\n  openTradeCount = 'openTradeCount',\n  tradeDetail = 'tradeDetail',\n  selectedPair = 'selectedPair',\n  trades = 'trades',\n  closedTrades = 'closedTrades',\n  allTrades = 'allTrades',\n  currentLocks = 'currentLocks',\n  plotConfig = 'plotConfig',\n  availablePlotConfigNames = 'availablePlotConfigNames',\n  plotConfigName = 'plotConfigName',\n  timeframe = 'timeframe',\n  isTrading = 'isTrading',\n  isWebserverMode = 'isWebserverMode',\n  shortAllowed = 'shortAllowed',\n  refreshRequired = 'refreshRequired',\n  selectedBacktestResult = 'selectedBacktestResult',\n  canRunBacktest = 'canRunBacktest',\n  stakeCurrencyDecimals = 'stakeCurrencyDecimals',\n  stakeCurrency = 'stakeCurrency',\n  strategyPlotConfig = 'strategyPlotConfig',\n  version = 'version',\n  botApiVersion = 'botApiVersion',\n  sysinfo = 'sysinfo',\n  profit = 'profit',\n  botState = 'botState',\n  whitelist = 'whitelist',\n  blacklist = 'blacklist',\n  pairlistMethods = 'pairlistMethods',\n  pairlist = 'pairlist',\n  balance = 'balance',\n  detailTradeId = 'detailTradeId',\n  historyStatus = 'historyStatus',\n  history = 'history',\n  lastLogs = 'lastLogs',\n  performanceStats = 'performanceStats',\n  dailyStats = 'dailyStats',\n  strategy = 'strategy',\n  strategyList = 'strategyList',\n  candleDataStatus = 'candleDataStatus',\n  candleData = 'candleData',\n  backtestRunning = 'backtestRunning',\n  backtestStep = 'backtestStep',\n  backtestProgress = 'backtestProgress',\n  backtestHistory = 'backtestHistory',\n  selectedBacktestResultKey = 'selectedBacktestResultKey',\n}\n\nexport enum BotStoreActions {\n  botAdded = 'botAdded',\n  ping = 'ping',\n  setIsBotOnline = 'setIsBotOnline',\n  setAutoRefresh = 'setAutoRefresh',\n  setRefreshRequired = 'setRefreshRequired',\n  refreshSlow = 'refreshSlow',\n  refreshFrequent = 'refreshFrequent',\n  setDetailTrade = 'setDetailTrade',\n  setSelectedPair = 'setSelectedPair',\n  saveCustomPlotConfig = 'saveCustomPlotConfig',\n  updatePlotConfigName = 'updatePlotConfigName',\n  getTrades = 'getTrades',\n  getLocks = 'getLocks',\n  deleteLock = 'deleteLock',\n  getOpenTrades = 'getOpenTrades',\n  getPairCandles = 'getPairCandles',\n  getPairHistory = 'getPairHistory',\n  getStrategyPlotConfig = 'getStrategyPlotConfig',\n  setPlotConfigName = 'setPlotConfigName',\n  getStrategyList = 'getStrategyList',\n  getStrategy = 'getStrategy',\n  getAvailablePairs = 'getAvailablePairs',\n  getPerformance = 'getPerformance',\n  getWhitelist = 'getWhitelist',\n  getBlacklist = 'getBlacklist',\n  getProfit = 'getProfit',\n  getBalance = 'getBalance',\n  getDaily = 'getDaily',\n  getState = 'getState',\n  getLogs = 'getLogs',\n  startBot = 'startBot',\n  stopBot = 'stopBot',\n  stopBuy = 'stopBuy',\n  reloadConfig = 'reloadConfig',\n  deleteTrade = 'deleteTrade',\n  startTrade = 'startTrade',\n  forcesell = 'forcesell',\n  forcebuy = 'forcebuy',\n  addBlacklist = 'addBlacklist',\n  deleteBlacklist = 'deleteBlacklist',\n  startBacktest = 'startBacktest',\n  pollBacktest = 'pollBacktest',\n  removeBacktest = 'removeBacktest',\n  stopBacktest = 'stopBacktest',\n  setBacktestResultKey = 'setBacktestResultKey',\n  sysInfo = 'sysInfo',\n  logout = 'logout',\n}\n\nexport function createBotSubStore(botId: string, botName: string) {\n  const userService = useUserService(botId);\n  const { api } = useApi(userService, botId);\n  return {\n    namespaced: true,\n    state,\n    getters: {\n      [BotStoreGetters.botName](state: FtbotStateType) {\n        return state.botState?.bot_name || 'freqtrade';\n      },\n      [BotStoreGetters.isBotOnline](state: FtbotStateType): boolean {\n        return state.isBotOnline;\n      },\n      [BotStoreGetters.autoRefresh](state: FtbotStateType): boolean {\n        return state.autoRefresh;\n      },\n      [BotStoreGetters.refreshNow](state, getters, rootState, rootGetters): boolean {\n        const bgRefresh = rootGetters['uiSettings/backgroundSync'];\n        const selectedBot = rootGetters[`${StoreModules.ftbot}/selectedBot`];\n        if (\n          (selectedBot === botId || bgRefresh) &&\n          getters.autoRefresh &&\n          getters.isBotOnline &&\n          !getters.isWebserverMode\n        ) {\n          return true;\n        }\n        return false;\n      },\n\n      [BotStoreGetters.plotConfig](state: FtbotStateType) {\n        return state.customPlotConfig[state.plotConfigName] || { ...EMPTY_PLOTCONFIG };\n      },\n      [BotStoreGetters.availablePlotConfigNames](state: FtbotStateType): string[] {\n        return state.availablePlotConfigNames;\n      },\n      [BotStoreGetters.plotConfigName](state: FtbotStateType): string {\n        return state.plotConfigName;\n      },\n      [BotStoreGetters.openTrades](state: FtbotStateType): Trade[] {\n        return state.openTrades;\n      },\n      [BotStoreGetters.openTradeCount](state: FtbotStateType): number {\n        return state.openTrades.length;\n      },\n      [BotStoreGetters.allTrades](state: FtbotStateType): Trade[] {\n        return [...state.openTrades, ...state.trades];\n      },\n      [BotStoreGetters.currentLocks](state: FtbotStateType): Lock[] {\n        return state.currentLocks?.locks || [];\n      },\n      [BotStoreGetters.tradeDetail](state: FtbotStateType): Trade | undefined {\n        let dTrade = state.openTrades.find((item) => item.trade_id === state.detailTradeId);\n        if (!dTrade) {\n          dTrade = state.trades.find((item) => item.trade_id === state.detailTradeId);\n        }\n        return dTrade;\n      },\n      [BotStoreGetters.selectedPair](state: FtbotStateType): string {\n        return state.selectedPair;\n      },\n      [BotStoreGetters.trades](state: FtbotStateType): Trade[] {\n        return state.trades;\n      },\n      [BotStoreGetters.closedTrades](state: FtbotStateType): Trade[] {\n        // Sort by trade_id desc\n        return state.trades\n          .filter((item) => !item.is_open)\n          .sort((a, b) =>\n            // Sort by close timestamp, then by tradeid\n            b.close_timestamp && a.close_timestamp\n              ? b.close_timestamp - a.close_timestamp\n              : b.trade_id - a.trade_id,\n          );\n      },\n      [BotStoreGetters.timeframe](state: FtbotStateType): string {\n        return state.botState?.timeframe || '';\n      },\n      [BotStoreGetters.isTrading](state: FtbotStateType): boolean {\n        return (\n          state.botState?.runmode === RunModes.LIVE || state.botState?.runmode === RunModes.DRY_RUN\n        );\n      },\n      [BotStoreGetters.isWebserverMode](state: FtbotStateType): boolean {\n        return state.botState?.runmode === RunModes.WEBSERVER;\n      },\n      [BotStoreGetters.shortAllowed](state: FtbotStateType): boolean {\n        return state.botState?.short_allowed || false;\n      },\n      [BotStoreGetters.refreshRequired](state: FtbotStateType): boolean {\n        return state.refreshRequired;\n      },\n      [BotStoreGetters.selectedBacktestResult](state: FtbotStateType): StrategyBacktestResult {\n        return state.backtestHistory[state.selectedBacktestResultKey];\n      },\n      [BotStoreGetters.canRunBacktest](state: FtbotStateType): boolean {\n        /** Determines if bot runs in webserver mode */\n        return state.botState?.runmode === RunModes.WEBSERVER;\n      },\n      [BotStoreGetters.stakeCurrencyDecimals](state: FtbotStateType): number {\n        return state.botState?.stake_currency_decimals || 3;\n      },\n      [BotStoreGetters.stakeCurrency](state: FtbotStateType): string {\n        return state.botState?.stake_currency || '';\n      },\n      [BotStoreGetters.strategyPlotConfig](state: FtbotStateType): PlotConfig | undefined {\n        return state.strategyPlotConfig;\n      },\n      [BotStoreGetters.version](state: FtbotStateType): string {\n        return state.botState?.version || state.version;\n      },\n      [BotStoreGetters.botApiVersion](state: FtbotStateType): number {\n        return state.botState?.api_version || 1.0;\n      },\n      [BotStoreGetters.sysinfo](state: FtbotStateType): SysInfoResponse | {} {\n        return state.sysinfo;\n      },\n      [BotStoreGetters.profit](state: FtbotStateType): ProfitInterface | {} {\n        return state.profit;\n      },\n      [BotStoreGetters.botState](state: FtbotStateType): BotState | undefined {\n        return state.botState;\n      },\n      [BotStoreGetters.whitelist](state: FtbotStateType): string[] {\n        return state.whitelist;\n      },\n      [BotStoreGetters.blacklist](state: FtbotStateType): string[] {\n        return state.blacklist;\n      },\n      [BotStoreGetters.pairlistMethods](state: FtbotStateType): string[] {\n        return state.pairlistMethods;\n      },\n      [BotStoreGetters.pairlist](state: FtbotStateType): string[] {\n        return state.pairlist;\n      },\n      [BotStoreGetters.balance](state: FtbotStateType): BalanceInterface | {} {\n        return state.balance;\n      },\n      [BotStoreGetters.detailTradeId](state: FtbotStateType): number | undefined {\n        return state.detailTradeId;\n      },\n      [BotStoreGetters.lastLogs](state: FtbotStateType): LogLine[] {\n        return state.lastLogs;\n      },\n      [BotStoreGetters.performanceStats](state: FtbotStateType): Performance[] {\n        return state.performanceStats;\n      },\n      [BotStoreGetters.dailyStats](state: FtbotStateType): DailyReturnValue | {} {\n        return state.dailyStats;\n      },\n      [BotStoreGetters.strategy](state: FtbotStateType): StrategyResult | {} {\n        return state.strategy;\n      },\n      [BotStoreGetters.strategyList](state: FtbotStateType): string[] {\n        return state.strategyList;\n      },\n      [BotStoreGetters.candleDataStatus](state: FtbotStateType): LoadingStatus {\n        return state.candleDataStatus;\n      },\n      [BotStoreGetters.candleData](state: FtbotStateType): PairHistory | {} {\n        return state.candleData;\n      },\n      [BotStoreGetters.historyStatus](state: FtbotStateType): LoadingStatus {\n        return state.historyStatus;\n      },\n      // TODO: Type me\n      [BotStoreGetters.history](state: FtbotStateType) {\n        return state.history;\n      },\n      [BotStoreGetters.backtestRunning](state: FtbotStateType): boolean {\n        return state.backtestRunning;\n      },\n      [BotStoreGetters.backtestStep](state: FtbotStateType): BacktestSteps {\n        return state.backtestStep;\n      },\n      [BotStoreGetters.backtestProgress](state: FtbotStateType): number {\n        return state.backtestProgress;\n      },\n      // TODO: type me\n      [BotStoreGetters.backtestHistory](state: FtbotStateType): {} {\n        return state.backtestHistory;\n      },\n      [BotStoreGetters.selectedBacktestResultKey](state: FtbotStateType): string {\n        return state.selectedBacktestResultKey;\n      },\n    },\n    mutations: {\n      setPing(state: FtbotStateType, ping) {\n        const now = Date.now();\n        state.ping = `${ping.status} ${now.toString()}`;\n      },\n      setIsBotOnline(state: FtbotStateType, isBotOnline: boolean) {\n        state.isBotOnline = isBotOnline;\n      },\n      setAutoRefresh(state: FtbotStateType, newRefreshValue: boolean) {\n        state.autoRefresh = newRefreshValue;\n      },\n      setRefreshing(state, refreshing: boolean) {\n        state.refreshing = refreshing;\n      },\n      updateRefreshRequired(state: FtbotStateType, refreshRequired: boolean) {\n        state.refreshRequired = refreshRequired;\n      },\n      updateTrades(state: FtbotStateType, { trades, tradesCount }) {\n        state.trades = trades;\n        state.tradeCount = tradesCount;\n      },\n      updateOpenTrades(state: FtbotStateType, trades) {\n        // console.log(`Update open trade length ${trades.length}`);\n        state.openTrades = trades;\n      },\n      updateLocks(state: FtbotStateType, locks: LockResponse) {\n        state.currentLocks = locks;\n      },\n      updatePerformance(state: FtbotStateType, performance) {\n        state.performanceStats = performance;\n      },\n      updateWhitelist(state: FtbotStateType, whitelist: WhitelistResponse) {\n        state.whitelist = whitelist.whitelist;\n        state.pairlistMethods = whitelist.method;\n      },\n      updateBlacklist(state: FtbotStateType, blacklist) {\n        state.blacklist = blacklist.blacklist;\n      },\n      updateProfit(state: FtbotStateType, profit) {\n        state.profit = profit;\n      },\n      updateDaily(state: FtbotStateType, daily: DailyReturnValue) {\n        state.dailyStats = daily;\n      },\n      updateBalance(state: FtbotStateType, balance: BalanceInterface) {\n        state.balance = balance;\n      },\n      updateState(state: FtbotStateType, botState: BotState) {\n        state.botState = botState;\n      },\n      updateVersion(state: FtbotStateType, version) {\n        state.version = version.version;\n      },\n      updateLogs(state: FtbotStateType, logs: Logs) {\n        state.lastLogs = logs.logs;\n      },\n      setDetailTrade(state: FtbotStateType, trade: Trade) {\n        state.detailTradeId = trade ? trade.trade_id : undefined;\n        state.selectedPair = trade ? trade.pair : state.selectedPair;\n      },\n      setSelectedPair(state: FtbotStateType, pair: string) {\n        state.selectedPair = pair;\n      },\n      updateStrategyList(state: FtbotStateType, result: StrategyListResult) {\n        state.strategyList = result.strategies;\n      },\n      updateStrategy(state: FtbotStateType, strategy: StrategyResult) {\n        state.strategy = strategy;\n      },\n      updatePairs(state: FtbotStateType, pairlist: string[]) {\n        state.pairlist = pairlist;\n      },\n      setCandleDataStatus(state: FtbotStateType, loading: LoadingStatus) {\n        state.candleDataStatus = loading;\n      },\n      updatePairCandles(state: FtbotStateType, { pair, timeframe, data }) {\n        state.candleData = { ...state.candleData, [`${pair}__${timeframe}`]: data };\n      },\n      setHistoryStatus(state: FtbotStateType, loading: LoadingStatus) {\n        state.historyStatus = loading;\n      },\n      updatePairHistory(state: FtbotStateType, { pair, timeframe, data }) {\n        // Intentionally drop the previous state here.\n        state.history = { [`${pair}__${timeframe}`]: data };\n      },\n      updatePlotConfig(state: FtbotStateType, plotConfig: PlotConfig) {\n        state.strategyPlotConfig = plotConfig;\n      },\n      updatePlotConfigName(state: FtbotStateType, plotConfigName: string) {\n        // Set default plot config name\n        state.plotConfigName = plotConfigName;\n        storePlotConfigName(plotConfigName);\n      },\n      saveCustomPlotConfig(state: FtbotStateType, plotConfig: PlotConfigStorage) {\n        state.customPlotConfig = plotConfig;\n        storeCustomPlotConfig(plotConfig);\n        state.availablePlotConfigNames = getAllPlotConfigNames();\n      },\n      updateBacktestRunning(state: FtbotStateType, backtestStatus: BacktestStatus) {\n        state.backtestRunning = backtestStatus.running;\n        state.backtestProgress = backtestStatus.progress;\n        state.backtestStep = backtestStatus.step;\n        state.backtestTradeCount = backtestStatus.trade_count || 0;\n      },\n      updateBacktestResult(state, backtestResult: BacktestResult) {\n        state.backtestResult = backtestResult;\n        // TODO: Properly identify duplicates to avoid pushing the same multiple times\n        Object.entries(backtestResult.strategy).forEach(([key, strat]) => {\n          console.log(key, strat);\n\n          const stratKey = `${key}_${strat.total_trades}_${strat.profit_total.toFixed(3)}`;\n          // state.backtestHistory[stratKey] = strat;\n          state.backtestHistory = { ...state.backtestHistory, ...{ [stratKey]: strat } };\n          state.selectedBacktestResultKey = stratKey;\n        });\n      },\n      resetBacktestHistory(state: FtbotStateType) {\n        state.backtestHistory = {};\n      },\n      setBacktestResultKey(state: FtbotStateType, key: string) {\n        state.selectedBacktestResultKey = key;\n      },\n      updateSysInfo(state, sysinfo: SysInfoResponse) {\n        state.sysinfo = sysinfo;\n      },\n    },\n    actions: {\n      [BotStoreActions.botAdded]({ commit }) {\n        commit('setAutoRefresh', userService.getAutoRefresh());\n      },\n      async [BotStoreActions.ping]({ commit }) {\n        try {\n          const result = await api.get('/ping');\n          commit('setPing', result.data);\n          commit('setIsBotOnline', true);\n          return Promise.resolve();\n        } catch (error) {\n          //\n          commit('setIsBotOnline', false);\n          return Promise.reject();\n        }\n      },\n      [BotStoreActions.logout]() {\n        userService.logout();\n      },\n      [BotStoreActions.setRefreshRequired]({ commit }, refreshRequired: boolean) {\n        commit('updateRefreshRequired', refreshRequired);\n      },\n      [BotStoreActions.setAutoRefresh]({ dispatch, commit }, newRefreshValue) {\n        commit('setAutoRefresh', newRefreshValue);\n        // TODO: Investigate this -\n        // this ONLY works if ReloadControl is only visible once,otherwise it triggers twice\n        if (newRefreshValue) {\n          // dispatch('startRefresh', true);\n        } else {\n          // dispatch('stopRefresh');\n        }\n        userService.setAutoRefresh(newRefreshValue);\n      },\n      [BotStoreActions.setIsBotOnline]({ commit }, refreshRequired: boolean) {\n        commit('setIsBotOnline', refreshRequired);\n      },\n      async [BotStoreActions.refreshSlow]({ dispatch, getters, state }, forceUpdate = false) {\n        if (state.refreshing && !forceUpdate) {\n          return;\n        }\n        // Refresh data only when needed\n        if (forceUpdate || getters[`${BotStoreGetters.refreshRequired}`]) {\n          const updates: Promise<AxiosInstance>[] = [];\n          updates.push(dispatch('getPerformance'));\n          updates.push(dispatch('getProfit'));\n          updates.push(dispatch('getTrades'));\n          updates.push(dispatch('getBalance'));\n          /* white/blacklist might be refreshed more often as they are not expensive on the backend */\n          updates.push(dispatch('getWhitelist'));\n          updates.push(dispatch('getBlacklist'));\n\n          await Promise.all(updates);\n          dispatch('setRefreshRequired', false);\n        }\n      },\n      [BotStoreActions.refreshFrequent]({ dispatch }) {\n        // Refresh data that's needed in near realtime\n        dispatch('getOpenTrades');\n        dispatch('getState');\n        dispatch('getLocks');\n      },\n\n      [BotStoreActions.setDetailTrade]({ commit }, trade: Trade) {\n        commit('setDetailTrade', trade);\n      },\n      [BotStoreActions.setSelectedPair]({ commit }, pair: string) {\n        commit('setSelectedPair', pair);\n      },\n      [BotStoreActions.saveCustomPlotConfig]({ commit }, plotConfig: PlotConfigStorage) {\n        commit('saveCustomPlotConfig', plotConfig);\n      },\n      [BotStoreActions.updatePlotConfigName]({ commit }, plotConfigName: string) {\n        commit('updatePlotConfigName', plotConfigName);\n      },\n      async [BotStoreActions.getTrades]({ commit }) {\n        try {\n          let totalTrades = 0;\n          const pageLength = 500;\n          const fetchTrades = async (limit: number, offset: number) => {\n            return api.get<TradeResponse>('/trades', {\n              params: { limit, offset },\n            });\n          };\n          const res = await fetchTrades(pageLength, 0);\n          const result: TradeResponse = res.data;\n          let { trades } = result;\n          if (trades.length !== result.total_trades) {\n            // Pagination necessary\n            // Don't use Promise.all - this would fire all requests at once, which can\n            // cause problems for big sqlite databases\n            do {\n              // eslint-disable-next-line no-await-in-loop\n              const res = await fetchTrades(pageLength, trades.length);\n\n              const result: TradeResponse = res.data;\n              trades = trades.concat(result.trades);\n              totalTrades = res.data.total_trades;\n            } while (trades.length !== totalTrades);\n          }\n          const tradesCount = trades.length;\n          // Add botId to all trades\n          trades = trades.map((t) => ({\n            ...t,\n            botId,\n            botName,\n            botTradeId: `${botId}__${t.trade_id}`,\n          }));\n          commit('updateTrades', { trades, tradesCount });\n          return Promise.resolve();\n        } catch (error) {\n          if (axios.isAxiosError(error)) {\n            console.error(error.response);\n          }\n          return Promise.reject(error);\n        }\n      },\n      [BotStoreActions.getLocks]({ commit }) {\n        return api\n          .get('/locks')\n          .then((result) => commit('updateLocks', result.data))\n          .catch(console.error);\n      },\n      async [BotStoreActions.deleteLock]({ dispatch, commit }, lockid: string) {\n        try {\n          const res = await api.delete<LockResponse>(`/locks/${lockid}`);\n          showAlert(dispatch, `Deleted Lock ${lockid}.`);\n          commit('updateLocks', res.data);\n          return Promise.resolve(res);\n        } catch (error) {\n          if (axios.isAxiosError(error)) {\n            console.error(error.response);\n          }\n          showAlert(dispatch, `Failed to delete lock ${lockid}`, 'danger');\n          return Promise.reject(error);\n        }\n      },\n      [BotStoreActions.getOpenTrades]({ commit, state }) {\n        return api\n          .get<never, AxiosResponse<Trade[]>>('/status')\n          .then((result) => {\n            // Check if trade-id's are different in this call, then trigger a full refresh\n            if (\n              Array.isArray(state.openTrades) &&\n              Array.isArray(result.data) &&\n              (state.openTrades.length !== result.data.length ||\n                !state.openTrades.every(\n                  (val, index) => val.trade_id === result.data[index].trade_id,\n                ))\n            ) {\n              // Open trades changed, so we should refresh now.\n              commit('updateRefreshRequired', true);\n              // dispatch('refreshSlow', null, { root: true });\n            }\n\n            const openTrades = result.data.map((t) => ({\n              ...t,\n              botId,\n              botName,\n              botTradeId: `${botId}__${t.trade_id}`,\n            }));\n\n            commit('updateOpenTrades', openTrades);\n          })\n          .catch(console.error);\n      },\n      [BotStoreActions.getPairCandles]({ commit }, payload: PairCandlePayload) {\n        if (payload.pair && payload.timeframe) {\n          commit('setCandleDataStatus', 'loading');\n          return api\n            .get('/pair_candles', {\n              params: { ...payload },\n            })\n            .then((result) => {\n              commit('updatePairCandles', {\n                pair: payload.pair,\n                timeframe: payload.timeframe,\n                data: result.data,\n              });\n              commit('setCandleDataStatus', 'success');\n            })\n            .catch((err) => {\n              console.error(err);\n              commit('setCandleDataStatus', 'error');\n            });\n        }\n        // Error branchs\n        const error = 'pair or timeframe not specified';\n        console.error(error);\n        return new Promise((resolve, reject) => {\n          reject(error);\n        });\n      },\n      [BotStoreActions.getPairHistory]({ commit }, payload: PairHistoryPayload) {\n        if (payload.pair && payload.timeframe && payload.timerange) {\n          commit('setHistoryStatus', 'loading');\n          return api\n            .get('/pair_history', {\n              params: { ...payload },\n              timeout: 50000,\n            })\n            .then((result) => {\n              commit('updatePairHistory', {\n                pair: payload.pair,\n                timeframe: payload.timeframe,\n                timerange: payload.timerange,\n                data: result.data,\n              });\n              commit('setHistoryStatus', 'success');\n            })\n            .catch((err) => {\n              console.error(err);\n              commit('setHistoryStatus', 'error');\n            });\n        }\n        // Error branchs\n        const error = 'pair or timeframe or timerange not specified';\n        console.error(error);\n        return new Promise((resolve, reject) => {\n          reject(error);\n        });\n      },\n      async [BotStoreActions.getStrategyPlotConfig]({ commit }) {\n        try {\n          const result = await api.get<PlotConfig>('/plot_config');\n          const plotConfig = result.data;\n          if (plotConfig.subplots === null) {\n            // Subplots should not be null but an empty object\n            // TODO: Remove this fix when fix in freqtrade is populated further.\n            plotConfig.subplots = {};\n          }\n          commit('updatePlotConfig', result.data);\n          return Promise.resolve();\n        } catch (data) {\n          console.error(data);\n          return Promise.reject(data);\n        }\n      },\n      [BotStoreActions.setPlotConfigName]({ commit }, plotConfigName: string) {\n        commit('updatePlotConfigName', plotConfigName);\n      },\n      [BotStoreActions.getStrategyList]({ commit }) {\n        return api\n          .get('/strategies')\n          .then((result) => commit('updateStrategyList', result.data))\n          .catch(console.error);\n      },\n      async [BotStoreActions.getStrategy]({ commit }, strategy: string) {\n        try {\n          const result = await api.get(`/strategy/${strategy}`, {});\n          commit('updateStrategy', result.data);\n          return Promise.resolve(result.data);\n        } catch (error) {\n          console.error(error);\n          return Promise.reject(error);\n        }\n      },\n      async [BotStoreActions.getAvailablePairs]({ commit }, payload: AvailablePairPayload) {\n        try {\n          const result = await api.get<AvailablePairResult>('/available_pairs', {\n            params: { ...payload },\n          });\n          // result is of type AvailablePairResult\n          const { pairs } = result.data;\n          commit('updatePairs', pairs);\n          return Promise.resolve(result.data);\n        } catch (error) {\n          console.error(error);\n          return Promise.reject(error);\n        }\n      },\n      async [BotStoreActions.getPerformance]({ commit }) {\n        try {\n          const result = await api.get('/performance');\n          commit('updatePerformance', result.data);\n          return Promise.resolve(result.data);\n        } catch (error) {\n          console.error(error);\n          return Promise.reject(error);\n        }\n      },\n      [BotStoreActions.getWhitelist]({ commit }) {\n        return api\n          .get('/whitelist')\n          .then((result) => {\n            commit('updateWhitelist', result.data);\n            return Promise.resolve(result.data);\n          })\n          .catch((error) => {\n            // console.error(error);\n            return Promise.reject(error);\n          });\n      },\n      [BotStoreActions.getBlacklist]({ commit }) {\n        return api\n          .get<BlacklistResponse>('/blacklist')\n          .then((result) => commit('updateBlacklist', result.data))\n          .catch(console.error);\n      },\n      [BotStoreActions.getProfit]({ commit }) {\n        return api\n          .get('/profit')\n          .then((result) => commit('updateProfit', result.data))\n          .catch(console.error);\n      },\n      async [BotStoreActions.getBalance]({ commit }) {\n        try {\n          const result = await api.get('/balance');\n          return commit('updateBalance', result.data);\n        } catch (error) {\n          return console.error(error);\n        }\n      },\n      [BotStoreActions.getDaily]({ commit }, payload: DailyPayload = {}) {\n        const { timescale = 20 } = payload;\n        return api\n          .get('/daily', { params: { timescale } })\n          .then((result) => commit('updateDaily', result.data))\n          .catch(console.error);\n      },\n      [BotStoreActions.getState]({ commit }) {\n        return api\n          .get('/show_config')\n          .then((result) => commit('updateState', result.data))\n          .catch(console.error);\n      },\n      [BotStoreActions.getLogs]({ commit }) {\n        return api\n          .get('/logs')\n          .then((result) => commit('updateLogs', result.data))\n          .catch(console.error);\n      },\n      // Post methods\n      // TODO: Migrate calls to API to a seperate module unrelated to vuex?\n      async [BotStoreActions.startBot]({ dispatch }) {\n        try {\n          const res = await api.post<{}, AxiosResponse<StatusResponse>>('/start', {});\n          console.log(res.data);\n          showAlert(dispatch, res.data.status);\n          return Promise.resolve(res);\n        } catch (error) {\n          if (axios.isAxiosError(error)) {\n            console.error(error.response);\n          }\n          showAlert(dispatch, 'Error starting bot.');\n          return Promise.reject(error);\n        }\n      },\n      async [BotStoreActions.stopBot]({ dispatch }) {\n        try {\n          const res = await api.post<{}, AxiosResponse<StatusResponse>>('/stop', {});\n          showAlert(dispatch, res.data.status);\n          return Promise.resolve(res);\n        } catch (error) {\n          if (axios.isAxiosError(error)) {\n            console.error(error.response);\n          }\n          showAlert(dispatch, 'Error stopping bot.');\n          return Promise.reject(error);\n        }\n      },\n      async [BotStoreActions.stopBuy]({ dispatch }) {\n        try {\n          const res = await api.post<{}, AxiosResponse<StatusResponse>>('/stopbuy', {});\n          showAlert(dispatch, res.data.status);\n          return Promise.resolve(res);\n        } catch (error) {\n          if (axios.isAxiosError(error)) {\n            console.error(error.response);\n          }\n          showAlert(dispatch, 'Error calling stopbuy.');\n          return Promise.reject(error);\n        }\n      },\n      async [BotStoreActions.reloadConfig]({ dispatch }) {\n        try {\n          const res = await api.post<{}, AxiosResponse<StatusResponse>>('/reload_config', {});\n          console.log(res.data);\n          showAlert(dispatch, res.data.status);\n          return Promise.resolve(res);\n        } catch (error) {\n          if (axios.isAxiosError(error)) {\n            console.error(error.response);\n          }\n          showAlert(dispatch, 'Error reloading.');\n          return Promise.reject(error);\n        }\n      },\n      async [BotStoreActions.deleteTrade]({ dispatch }, tradeid: string) {\n        try {\n          const res = await api.delete<DeleteTradeResponse>(`/trades/${tradeid}`);\n          showAlert(\n            dispatch,\n            res.data.result_msg ? res.data.result_msg : `Deleted Trade ${tradeid}`,\n          );\n          return Promise.resolve(res);\n        } catch (error) {\n          if (axios.isAxiosError(error)) {\n            console.error(error.response);\n          }\n          showAlert(dispatch, `Failed to delete trade ${tradeid}`, 'danger');\n          return Promise.reject(error);\n        }\n      },\n      async [BotStoreActions.startTrade]() {\n        try {\n          const res = await api.post('/start_trade', {});\n          return Promise.resolve(res);\n        } catch (error) {\n          return Promise.reject(error);\n        }\n      },\n      async [BotStoreActions.forcesell]({ dispatch }, payload: ForceSellPayload) {\n        try {\n          const res = await api.post<ForceSellPayload, AxiosResponse<StatusResponse>>(\n            '/forcesell',\n            payload,\n          );\n          showAlert(dispatch, `Sell order for ${payload.tradeid} created`);\n          return Promise.resolve(res);\n        } catch (error) {\n          if (axios.isAxiosError(error)) {\n            console.error(error.response);\n          }\n          showAlert(dispatch, `Failed to create sell order for ${payload.tradeid}`, 'danger');\n          return Promise.reject(error);\n        }\n      },\n      async [BotStoreActions.forcebuy]({ dispatch }, payload: ForceEnterPayload) {\n        if (payload && payload.pair) {\n          try {\n            // TODO: Update forcebuy to forceenter ...\n            const res = await api.post<\n              ForceEnterPayload,\n              AxiosResponse<StatusResponse | TradeResponse>\n            >('/forcebuy', payload);\n            showAlert(dispatch, `Order for ${payload.pair} created.`);\n\n            return Promise.resolve(res);\n          } catch (error) {\n            if (axios.isAxiosError(error)) {\n              console.error(error.response);\n              showAlert(\n                dispatch,\n                `Error occured entering: '${(error as any).response?.data?.error}'`,\n                'danger',\n              );\n            }\n            return Promise.reject(error);\n          }\n        }\n        // Error branchs\n        const error = 'Pair is empty';\n        console.error(error);\n        return Promise.reject(error);\n      },\n      async [BotStoreActions.addBlacklist]({ commit, dispatch }, payload: BlacklistPayload) {\n        console.log(`Adding ${payload} to blacklist`);\n        if (payload && payload.blacklist) {\n          try {\n            const result = await api.post<BlacklistPayload, AxiosResponse<BlacklistResponse>>(\n              '/blacklist',\n              payload,\n            );\n            commit('updateBlacklist', result.data);\n            if (result.data.errors && Object.keys(result.data.errors).length !== 0) {\n              const { errors } = result.data;\n              Object.keys(errors).forEach((pair) => {\n                showAlert(\n                  dispatch,\n                  `Error while adding pair ${pair} to Blacklist: ${errors[pair].error_msg}`,\n                );\n              });\n            } else {\n              showAlert(dispatch, `Pair ${payload.blacklist} added.`);\n            }\n            return Promise.resolve(result.data);\n          } catch (error) {\n            if (axios.isAxiosError(error)) {\n              console.error(error.response);\n              showAlert(\n                dispatch,\n                `Error occured while adding pairs to Blacklist: '${\n                  (error as any).response?.data?.error\n                }'`,\n                'danger',\n              );\n            }\n\n            return Promise.reject(error);\n          }\n        }\n        // Error branchs\n        const error = 'Pair is empty';\n        console.error(error);\n        return Promise.reject(error);\n      },\n      async [BotStoreActions.deleteBlacklist]({ commit, dispatch }, blacklistPairs: Array<string>) {\n        console.log(`Deleting ${blacklistPairs} from blacklist.`);\n\n        if (blacklistPairs) {\n          try {\n            const result = await api.delete<BlacklistPayload, AxiosResponse<BlacklistResponse>>(\n              '/blacklist',\n              {\n                params: {\n                  // eslint-disable-next-line @typescript-eslint/camelcase\n                  pairs_to_delete: blacklistPairs,\n                },\n                paramsSerializer: (params) => parseParams(params),\n              },\n            );\n            commit('updateBlacklist', result.data);\n            if (result.data.errors && Object.keys(result.data.errors).length !== 0) {\n              const { errors } = result.data;\n              Object.keys(errors).forEach((pair) => {\n                showAlert(\n                  dispatch,\n                  `Error while removing pair ${pair} from Blacklist: ${errors[pair].error_msg}`,\n                );\n              });\n            } else {\n              showAlert(dispatch, `Pair ${blacklistPairs} removed.`);\n            }\n            return Promise.resolve(result.data);\n          } catch (error) {\n            if (axios.isAxiosError(error)) {\n              console.error(error.response);\n              showAlert(\n                dispatch,\n                `Error occured while removing pairs from Blacklist: '${\n                  (error as any).response?.data?.error\n                }'`,\n                'danger',\n              );\n            }\n\n            return Promise.reject(error);\n          }\n        }\n        // Error branchs\n        const error = 'Pair is empty';\n        console.error(error);\n        return Promise.reject(error);\n      },\n      async [BotStoreActions.startBacktest]({ commit }, payload) {\n        try {\n          const result = await api.post('/backtest', payload);\n          commit('updateBacktestRunning', result.data);\n        } catch (err) {\n          console.log(err);\n        }\n      },\n      async [BotStoreActions.pollBacktest]({ commit }) {\n        const result = await api.get<BacktestStatus>('/backtest');\n        commit('updateBacktestRunning', result.data);\n        if (result.data.running === false && result.data.backtest_result) {\n          commit('updateBacktestResult', result.data.backtest_result);\n        }\n      },\n      async [BotStoreActions.removeBacktest]({ commit }) {\n        commit('resetBacktestHistory');\n        try {\n          const { data } = await api.delete<BacktestStatus>('/backtest');\n          commit('updateBacktestRunning', data);\n          return Promise.resolve(data);\n        } catch (err) {\n          return Promise.reject(err);\n        }\n      },\n      async [BotStoreActions.stopBacktest]({ commit }) {\n        try {\n          const { data } = await api.get<BacktestStatus>('/backtest/abort');\n          commit('updateBacktestRunning', data);\n          return Promise.resolve(data);\n        } catch (err) {\n          return Promise.reject(err);\n        }\n      },\n      [BotStoreActions.setBacktestResultKey]({ commit }, key: string) {\n        commit('setBacktestResultKey', key);\n      },\n      async [BotStoreActions.sysInfo]({ commit }) {\n        try {\n          const { data } = await api.get('/sysinfo');\n          commit('updateSysInfo', data);\n          return Promise.resolve(data);\n        } catch (err) {\n          return Promise.reject(err);\n        }\n      },\n    },\n  };\n}\n","import {\n  BotDescriptor,\n  BotDescriptors,\n  DailyPayload,\n  DailyRecord,\n  DailyReturnValue,\n  MultiDeletePayload,\n  MultiForcesellPayload,\n  Trade,\n} from '@/types';\nimport { AxiosInstance } from 'axios';\nimport StoreModules from '../storeSubModules';\nimport { BotStoreActions, BotStoreGetters, createBotSubStore } from './ftbot';\n\nconst AUTH_SELECTED_BOT = 'ftSelectedBot';\n\ninterface FTMultiBotState {\n  selectedBot: string;\n  availableBots: BotDescriptors;\n  globalAutoRefresh: boolean;\n  refreshing: boolean;\n  refreshInterval: number | null;\n  refreshIntervalSlow: number | null;\n}\n\nexport enum MultiBotStoreGetters {\n  hasBots = 'hasBots',\n  botCount = 'botCount',\n  nextBotId = 'nextBotId',\n  selectedBot = 'selectedBot',\n  selectedBotObj = 'selectedBotObj',\n  globalAutoRefresh = 'globalAutoRefresh',\n  allAvailableBots = 'allAvailableBots',\n  allAvailableBotsList = 'allAvailableBotsList',\n  allTradesAllBots = 'allTradesAllBots',\n  allOpenTradesAllBots = 'allOpenTradesAllBots',\n  allDailyStatsAllBots = 'allDailyStatsAllBots',\n  // Automatically created entries\n  allIsBotOnline = 'allIsBotOnline',\n  allAutoRefresh = 'allAutoRefresh',\n  allProfit = 'allProfit',\n  allOpenTrades = 'allOpenTrades',\n  allOpenTradeCount = 'allOpenTradeCount',\n  allClosedTrades = 'allClosedTrades',\n  allBotState = 'allBotState',\n  allBalance = 'allBalance',\n}\n\nconst createAllGetters = [\n  'isBotOnline',\n  'autoRefresh',\n  'closedTrades',\n  'profit',\n  'openTrades',\n  'openTradeCount',\n  'closedTrades',\n  'botState',\n  'balance',\n];\n\nexport default function createBotStore(store) {\n  const state: FTMultiBotState = {\n    selectedBot: '',\n    availableBots: {},\n    globalAutoRefresh: true,\n    refreshing: false,\n    refreshInterval: null,\n    refreshIntervalSlow: null,\n  };\n\n  // All getters working on all bots should be prefixed with all.\n  const getters = {\n    [MultiBotStoreGetters.hasBots](state: FTMultiBotState): boolean {\n      return Object.keys(state.availableBots).length > 0;\n    },\n    [MultiBotStoreGetters.botCount](state: FTMultiBotState): number {\n      return Object.keys(state.availableBots).length;\n    },\n    [MultiBotStoreGetters.nextBotId](state: FTMultiBotState): string {\n      let botCount = Object.keys(state.availableBots).length;\n\n      while (`ftbot.${botCount}` in state.availableBots) {\n        botCount += 1;\n      }\n      return `ftbot.${botCount}`;\n    },\n    [MultiBotStoreGetters.selectedBot](state: FTMultiBotState): string {\n      return state.selectedBot;\n    },\n    [MultiBotStoreGetters.selectedBotObj](state: FTMultiBotState): BotDescriptor {\n      return state.availableBots[state.selectedBot];\n    },\n    [MultiBotStoreGetters.globalAutoRefresh](state: FTMultiBotState): boolean {\n      return state.globalAutoRefresh;\n    },\n    [MultiBotStoreGetters.allAvailableBots](state: FTMultiBotState): BotDescriptors {\n      return state.availableBots;\n    },\n    [MultiBotStoreGetters.allAvailableBotsList](state: FTMultiBotState): string[] {\n      return Object.keys(state.availableBots);\n    },\n    [MultiBotStoreGetters.allTradesAllBots](state: FTMultiBotState, getters): Trade[] {\n      let resp: Trade[] = [];\n      getters.allAvailableBotsList.forEach((botId) => {\n        const trades = getters[`${botId}/${BotStoreGetters.trades}`].map((t) => ({ ...t, botId }));\n\n        resp = resp.concat(trades);\n      });\n      return resp;\n    },\n    [MultiBotStoreGetters.allOpenTradesAllBots](state: FTMultiBotState, getters): Trade[] {\n      let resp: Trade[] = [];\n      getters.allAvailableBotsList.forEach((botId) => {\n        const trades = getters[`${botId}/${BotStoreGetters.openTrades}`].map((t) => ({\n          ...t,\n        }));\n\n        resp = resp.concat(trades);\n      });\n      return resp;\n    },\n    [MultiBotStoreGetters.allDailyStatsAllBots](state: FTMultiBotState, getters): DailyReturnValue {\n      const resp: Record<string, DailyRecord> = {};\n      getters.allAvailableBotsList.forEach((botId) => {\n        getters[`${botId}/${BotStoreGetters.dailyStats}`]?.data?.forEach((d) => {\n          if (!resp[d.date]) {\n            resp[d.date] = { ...d };\n          } else {\n            // eslint-disable-next-line @typescript-eslint/camelcase\n            resp[d.date].abs_profit += d.abs_profit;\n            // eslint-disable-next-line @typescript-eslint/camelcase\n            resp[d.date].fiat_value += d.fiat_value;\n            // eslint-disable-next-line @typescript-eslint/camelcase\n            resp[d.date].trade_count += d.trade_count;\n          }\n        });\n      });\n\n      const dailyReturn: DailyReturnValue = {\n        // eslint-disable-next-line @typescript-eslint/camelcase\n        stake_currency: 'USDT',\n        // eslint-disable-next-line @typescript-eslint/camelcase\n        fiat_display_currency: 'USD',\n        data: Object.values(resp),\n      };\n      return dailyReturn;\n    },\n  };\n  // Autocreate getters from botStores\n  Object.keys(BotStoreGetters).forEach((e) => {\n    getters[e] = (state, getters) => {\n      return getters[`${state.selectedBot}/${e}`];\n    };\n  });\n\n  // Create selected getters\n  createAllGetters.forEach((e: string) => {\n    const getterName = `all${e.charAt(0).toUpperCase() + e.slice(1)}`;\n    console.log('creating getter', e, getterName);\n    getters[getterName] = (state, getters) => {\n      const result = {};\n\n      getters.allAvailableBotsList.forEach((botId) => {\n        result[botId] = getters[`${botId}/${e}`];\n      });\n      return result;\n    };\n  });\n\n  const mutations = {\n    selectBot(state: FTMultiBotState, botId: string) {\n      if (botId in state.availableBots) {\n        state.selectedBot = botId;\n      } else {\n        console.warn(`Botid ${botId} not available, but selected.`);\n      }\n    },\n    setGlobalAutoRefresh(state, value: boolean) {\n      state.globalAutoRefresh = value;\n    },\n    setRefreshing(state, refreshing: boolean) {\n      state.refreshing = refreshing;\n    },\n    addBot(state: FTMultiBotState, bot: BotDescriptor) {\n      state.availableBots[bot.botId] = bot;\n    },\n    removeBot(state: FTMultiBotState, botId: string) {\n      if (botId in state.availableBots) {\n        delete state.availableBots[botId];\n      }\n    },\n    setRefreshInterval(state: FTMultiBotState, interval: number | null) {\n      state.refreshInterval = interval;\n    },\n    setRefreshIntervalSlow(state: FTMultiBotState, interval: number | null) {\n      state.refreshIntervalSlow = interval;\n    },\n  };\n\n  const actions = {\n    // Actions automatically filled below\n    addBot({ dispatch, getters, commit }, bot: BotDescriptor) {\n      if (Object.keys(getters.allAvailableBots).includes(bot.botId)) {\n        // throw 'Bot already present';\n        // TODO: handle error!\n        console.log('Bot already present');\n        return;\n      }\n      console.log('add bot', bot);\n      store.registerModule(\n        [StoreModules.ftbot, bot.botId],\n        createBotSubStore(bot.botId, bot.botName),\n      );\n      dispatch(`${bot.botId}/botAdded`);\n      commit('addBot', bot);\n    },\n    removeBot({ commit, getters, dispatch }, botId: string) {\n      if (Object.keys(getters.allAvailableBots).includes(botId)) {\n        dispatch(`${botId}/logout`);\n        store.unregisterModule([StoreModules.ftbot, botId]);\n        commit('removeBot', botId);\n      } else {\n        console.warn(`bot ${botId} not found! could not remove`);\n      }\n    },\n    selectFirstBot({ commit, getters }) {\n      if (getters.hasBots) {\n        const selBotId = localStorage.getItem(AUTH_SELECTED_BOT);\n        const firstBot = Object.keys(getters.allAvailableBots)[0];\n        let selBot: string | undefined = firstBot;\n        if (selBotId) {\n          selBot = Object.keys(getters.allAvailableBots).find((x) => x === selBotId);\n        }\n        commit('selectBot', getters.allAvailableBots[selBot || firstBot].botId);\n      }\n    },\n    selectBot({ commit }, botId: string) {\n      localStorage.setItem(AUTH_SELECTED_BOT, botId);\n      commit('selectBot', botId);\n    },\n    setGlobalAutoRefresh({ commit }, value: boolean) {\n      commit('setGlobalAutoRefresh', value);\n    },\n    allRefreshFrequent({ dispatch, getters }, forceUpdate = false) {\n      getters.allAvailableBotsList.forEach((e) => {\n        if (\n          getters[`${e}/${BotStoreGetters.refreshNow}`] &&\n          (getters[MultiBotStoreGetters.globalAutoRefresh] || forceUpdate)\n        ) {\n          // console.log('refreshing', e);\n          dispatch(`${e}/${BotStoreActions.refreshFrequent}`);\n        }\n      });\n    },\n    allRefreshSlow({ dispatch, getters }, forceUpdate = false) {\n      getters.allAvailableBotsList.forEach((e) => {\n        if (\n          getters[`${e}/${BotStoreGetters.refreshNow}`] &&\n          (getters[MultiBotStoreGetters.globalAutoRefresh] || forceUpdate)\n        ) {\n          dispatch(`${e}/${BotStoreActions.refreshSlow}`, forceUpdate);\n        }\n      });\n    },\n    async allRefreshFull({ commit, dispatch, state }) {\n      if (state.refreshing) {\n        return;\n      }\n      commit('setRefreshing', true);\n      try {\n        // Ensure all bots status is correct.\n        await dispatch('pingAll');\n        const updates: Promise<AxiosInstance>[] = [];\n        updates.push(dispatch('allRefreshFrequent', false));\n        updates.push(dispatch('allRefreshSlow', true));\n        // updates.push(dispatch('getDaily'));\n        // updates.push(dispatch('getBalance'));\n\n        await Promise.all(updates);\n        console.log('refreshing_end');\n      } finally {\n        commit('setRefreshing', false);\n      }\n    },\n\n    startRefresh({ state, dispatch, commit }) {\n      console.log('Starting automatic refresh.');\n      dispatch('allRefreshFull');\n\n      if (!state.refreshInterval) {\n        // Set interval for refresh\n        const refreshInterval = window.setInterval(() => {\n          dispatch('allRefreshFrequent');\n        }, 5000);\n        commit('setRefreshInterval', refreshInterval);\n      }\n      if (!state.refreshIntervalSlow) {\n        const refreshIntervalSlow = window.setInterval(() => {\n          dispatch('allRefreshSlow', false);\n        }, 60000);\n        commit('setRefreshIntervalSlow', refreshIntervalSlow);\n      }\n    },\n    stopRefresh({ state, commit }: { state: FTMultiBotState; commit: any }) {\n      console.log('Stopping automatic refresh.');\n      if (state.refreshInterval) {\n        window.clearInterval(state.refreshInterval);\n        commit('setRefreshInterval', null);\n      }\n      if (state.refreshIntervalSlow) {\n        window.clearInterval(state.refreshIntervalSlow);\n        commit('setRefreshIntervalSlow', null);\n      }\n    },\n\n    async pingAll({ getters, dispatch }) {\n      await Promise.all(\n        getters.allAvailableBotsList.map(async (e) => {\n          try {\n            await dispatch(`${e}/ping`);\n          } catch {\n            // pass\n          }\n        }),\n      );\n    },\n    allGetState({ getters, dispatch }) {\n      getters.allAvailableBotsList.forEach((e) => {\n        dispatch(`${e}/getState`);\n      });\n    },\n    allGetDaily({ getters, dispatch }, payload: DailyPayload) {\n      getters.allAvailableBotsList.forEach((e) => {\n        dispatch(`${e}/getDaily`, payload);\n      });\n    },\n    async forceSellMulti({ dispatch }, forcesellPayload: MultiForcesellPayload) {\n      return dispatch(`${forcesellPayload.botId}/${[BotStoreActions.forcesell]}`, forcesellPayload);\n    },\n    async deleteTradeMulti({ dispatch }, deletePayload: MultiDeletePayload) {\n      return dispatch(\n        `${deletePayload.botId}/${[BotStoreActions.deleteTrade]}`,\n        deletePayload.tradeid,\n      );\n    },\n  };\n  // Autocreate Actions from botstores\n  Object.keys(BotStoreActions).forEach((e) => {\n    actions[e] = ({ state, dispatch, getters }, ...args) => {\n      if (getters.hasBots) {\n        return dispatch(`${state.selectedBot}/${e}`, ...args);\n      }\n      console.warn(`bot ${state.selectedBot} is not registered.`);\n      return {};\n    };\n  });\n\n  return {\n    namespaced: true,\n    // modules: {\n    //   'ftbot.0': createBotSubStore('ftbot.0'),\n    // },\n    state,\n    mutations,\n\n    getters,\n    actions,\n  };\n}\n","<template>\n  <div>\n    <form ref=\"form\" novalidate @submit.stop.prevent=\"handleSubmit\" @reset=\"handleReset\">\n      <b-form-group label=\"Bot Name\" label-for=\"name-input\">\n        <b-form-input\n          id=\"name-input\"\n          v-model=\"auth.botName\"\n          placeholder=\"Bot Name\"\n          @keydown.enter.native=\"handleOk\"\n        ></b-form-input>\n      </b-form-group>\n      <b-form-group\n        :state=\"urlState\"\n        label=\"API Url\"\n        label-for=\"url-input\"\n        invalid-feedback=\"API Url required\"\n      >\n        <b-form-input\n          id=\"url-input\"\n          v-model=\"auth.url\"\n          :state=\"urlState\"\n          required\n          @keydown.enter.native=\"handleOk\"\n        ></b-form-input>\n      </b-form-group>\n      <b-form-group\n        :state=\"nameState\"\n        label=\"Username\"\n        label-for=\"username-input\"\n        invalid-feedback=\"Name and Password are required.\"\n      >\n        <b-form-input\n          id=\"username-input\"\n          v-model=\"auth.username\"\n          required\n          placeholder=\"Freqtrader\"\n          @keydown.enter.native=\"handleOk\"\n        ></b-form-input>\n      </b-form-group>\n      <b-form-group\n        label=\"Password\"\n        label-for=\"password-input\"\n        invalid-feedback=\"Invalid Password\"\n        :state=\"pwdState\"\n      >\n        <b-form-input\n          id=\"password-input\"\n          v-model=\"auth.password\"\n          required\n          type=\"password\"\n          @keydown.enter.native=\"handleOk\"\n        ></b-form-input>\n      </b-form-group>\n      <div>\n        <b-alert v-if=\"errorMessage\" class=\"alert-wrap\" show variant=\"warning\">\n          {{ errorMessage }}\n          <br />\n          <span v-if=\"errorMessageCORS\">\n            Please also check your bot's CORS configuration:\n            <a href=\"https://www.freqtrade.io/en/latest/rest-api/#cors\"\n              >Freqtrade CORS documentation</a\n            ></span\n          >\n        </b-alert>\n      </div>\n      <div v-if=\"inModal === false\" class=\"float-right\">\n        <b-button class=\"mr-2\" type=\"reset\" variant=\"danger\">Reset</b-button>\n        <b-button type=\"submit\" variant=\"primary\">Submit</b-button>\n      </div>\n    </form>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Component, Vue, Emit, Prop } from 'vue-property-decorator';\nimport { Action, namespace } from 'vuex-class';\nimport { useUserService } from '@/shared/userService';\n\nimport { AuthPayload, BotDescriptor } from '@/types';\nimport { MultiBotStoreGetters } from '@/store/modules/botStoreWrapper';\nimport StoreModules from '@/store/storeSubModules';\n\nconst defaultURL = window.location.origin || 'http://localhost:3000';\nconst ftbot = namespace(StoreModules.ftbot);\n\n@Component({})\nexport default class Login extends Vue {\n  @Action setLoggedIn;\n\n  @ftbot.Getter [MultiBotStoreGetters.nextBotId]: string;\n\n  @ftbot.Getter [MultiBotStoreGetters.selectedBot]: string;\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  @ftbot.Action addBot!: (payload: BotDescriptor) => void;\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  @ftbot.Action selectBot!: (botId: string) => void;\n\n  @ftbot.Action allRefreshFull;\n\n  @Prop({ default: false }) inModal!: boolean;\n\n  $refs!: {\n    form: HTMLFormElement;\n  };\n\n  auth: AuthPayload = {\n    botName: '',\n    url: defaultURL,\n    username: '',\n    password: '',\n  };\n\n  @Emit('loginResult')\n  emitLoginResult(value: boolean) {\n    return value;\n  }\n\n  nameState: boolean | null = null;\n\n  pwdState: boolean | null = null;\n\n  urlState: boolean | null = null;\n\n  errorMessage = '';\n\n  errorMessageCORS = false;\n\n  checkFormValidity() {\n    const valid = this.$refs.form.checkValidity();\n    this.nameState = valid || this.auth.username !== '';\n    this.pwdState = valid || this.auth.password !== '';\n    return valid;\n  }\n\n  resetLogin() {\n    this.auth.url = defaultURL;\n    this.auth.username = '';\n    this.auth.password = '';\n    this.nameState = null;\n    this.pwdState = null;\n    this.errorMessage = '';\n  }\n\n  handleReset(evt) {\n    evt.preventDefault();\n    this.resetLogin();\n  }\n\n  handleOk(evt) {\n    evt.preventDefault();\n    this.handleSubmit();\n  }\n\n  handleSubmit() {\n    // Exit when the form isn't valid\n    if (!this.checkFormValidity()) {\n      return;\n    }\n    this.errorMessage = '';\n    const userService = useUserService(this.nextBotId);\n    // Push the name to submitted names\n    userService\n      .login(this.auth)\n      .then(() => {\n        const botId = this.nextBotId;\n        this.addBot({\n          botName: this.auth.botName,\n          botId,\n          botUrl: this.auth.url,\n        });\n        if (this.selectedBot === '') {\n          console.log(`selecting bot ${botId}`);\n          this.selectBot(botId);\n        }\n\n        this.emitLoginResult(true);\n        this.allRefreshFull();\n        if (this.inModal === false) {\n          if (typeof this.$route.query.redirect === 'string') {\n            const resolved = this.$router.resolve({ path: this.$route.query.redirect });\n            if (resolved.route.name !== '404') {\n              this.$router.push(resolved.route.path);\n            } else {\n              this.$router.push('/');\n            }\n          } else {\n            this.$router.push('/');\n          }\n        }\n      })\n      .catch((error) => {\n        this.errorMessageCORS = false;\n        // this.nameState = false;\n        console.error(error.response);\n        if (error.response && error.response.status === 401) {\n          this.nameState = false;\n          this.pwdState = false;\n          this.errorMessage = 'Connected to bot, however Login failed, Username or Password wrong.';\n        } else {\n          this.urlState = false;\n          this.errorMessage = `Login failed.\nPlease verify that the bot is running, the Bot API is enabled and the URL is reachable.\nYou can verify this by navigating to ${this.auth.url}/api/v1/ping to make sure the bot API is reachable`;\n          if (this.auth.url !== window.location.origin) {\n            this.errorMessageCORS = true;\n          }\n        }\n        console.error(this.errorMessage);\n        this.emitLoginResult(false);\n      });\n  }\n}\n</script>\n\n<style scoped lang=\"scss\">\n.alert-wrap {\n  white-space: pre-wrap;\n}\n</style>\n","\n<div>\n  <form ref=\"form\" novalidate @submit.stop.prevent=\"handleSubmit\" @reset=\"handleReset\">\n    <b-form-group label=\"Bot Name\" label-for=\"name-input\">\n      <b-form-input\n        id=\"name-input\"\n        v-model=\"auth.botName\"\n        placeholder=\"Bot Name\"\n        @keydown.enter.native=\"handleOk\"\n      ></b-form-input>\n    </b-form-group>\n    <b-form-group\n      :state=\"urlState\"\n      label=\"API Url\"\n      label-for=\"url-input\"\n      invalid-feedback=\"API Url required\"\n    >\n      <b-form-input\n        id=\"url-input\"\n        v-model=\"auth.url\"\n        :state=\"urlState\"\n        required\n        @keydown.enter.native=\"handleOk\"\n      ></b-form-input>\n    </b-form-group>\n    <b-form-group\n      :state=\"nameState\"\n      label=\"Username\"\n      label-for=\"username-input\"\n      invalid-feedback=\"Name and Password are required.\"\n    >\n      <b-form-input\n        id=\"username-input\"\n        v-model=\"auth.username\"\n        required\n        placeholder=\"Freqtrader\"\n        @keydown.enter.native=\"handleOk\"\n      ></b-form-input>\n    </b-form-group>\n    <b-form-group\n      label=\"Password\"\n      label-for=\"password-input\"\n      invalid-feedback=\"Invalid Password\"\n      :state=\"pwdState\"\n    >\n      <b-form-input\n        id=\"password-input\"\n        v-model=\"auth.password\"\n        required\n        type=\"password\"\n        @keydown.enter.native=\"handleOk\"\n      ></b-form-input>\n    </b-form-group>\n    <div>\n      <b-alert v-if=\"errorMessage\" class=\"alert-wrap\" show variant=\"warning\">\n        {{ errorMessage }}\n        <br />\n        <span v-if=\"errorMessageCORS\">\n          Please also check your bot's CORS configuration:\n          <a href=\"https://www.freqtrade.io/en/latest/rest-api/#cors\"\n            >Freqtrade CORS documentation</a\n          ></span\n        >\n      </b-alert>\n    </div>\n    <div v-if=\"inModal === false\" class=\"float-right\">\n      <b-button class=\"mr-2\" type=\"reset\" variant=\"danger\">Reset</b-button>\n      <b-button type=\"submit\" variant=\"primary\">Submit</b-button>\n    </div>\n  </form>\n</div>\n","<template>\n  <div>\n    <b-button v-b-modal.modal-prevent-closing>{{ loginText }}</b-button>\n    <b-modal id=\"modal-prevent-closing\" ref=\"modal\" title=\"Login to your bot\" @ok=\"handleOk\">\n      <Login id=\"loginForm\" ref=\"loginForm\" in-modal @loginResult=\"handleLoginResult\" />\n    </b-modal>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Component, Prop, Vue } from 'vue-property-decorator';\n\nimport Login from '@/components/Login.vue';\n\n@Component({\n  components: { Login },\n})\nexport default class LoginModal extends Vue {\n  $refs!: {\n    loginForm: HTMLFormElement;\n    modal: HTMLElement;\n  };\n\n  @Prop({ required: false, default: 'Login', type: String }) loginText!: string;\n\n  resetLogin() {\n    // this.$refs.loginForm.resetLogin();\n  }\n\n  handleLoginResult(result: boolean) {\n    if (result) {\n      (this.$refs.modal as any).hide();\n    }\n  }\n\n  handleOk(evt) {\n    evt.preventDefault();\n    this.$refs.loginForm.handleSubmit();\n  }\n}\n</script>\n\n<style scoped></style>\n","\n<div>\n  <b-button v-b-modal.modal-prevent-closing>{{ loginText }}</b-button>\n  <b-modal id=\"modal-prevent-closing\" ref=\"modal\" title=\"Login to your bot\" @ok=\"handleOk\">\n    <Login id=\"loginForm\" ref=\"loginForm\" in-modal @loginResult=\"handleLoginResult\" />\n  </b-modal>\n</div>\n","const scriptRel = 'modulepreload';const seen = {};const base = '/';export const __vitePreload = function preload(baseModule, deps) {\n    // @ts-ignore\n    if (!__VITE_IS_MODERN__ || !deps || deps.length === 0) {\n        return baseModule();\n    }\n    return Promise.all(deps.map((dep) => {\n        // @ts-ignore\n        dep = `${base}${dep}`;\n        // @ts-ignore\n        if (dep in seen)\n            return;\n        // @ts-ignore\n        seen[dep] = true;\n        const isCss = dep.endsWith('.css');\n        const cssSelector = isCss ? '[rel=\"stylesheet\"]' : '';\n        // @ts-ignore check if the file is already preloaded by SSR markup\n        if (document.querySelector(`link[href=\"${dep}\"]${cssSelector}`)) {\n            return;\n        }\n        // @ts-ignore\n        const link = document.createElement('link');\n        // @ts-ignore\n        link.rel = isCss ? 'stylesheet' : scriptRel;\n        if (!isCss) {\n            link.as = 'script';\n            link.crossOrigin = '';\n        }\n        link.href = dep;\n        // @ts-ignore\n        document.head.appendChild(link);\n        if (isCss) {\n            return new Promise((res, rej) => {\n                link.addEventListener('load', res);\n                link.addEventListener('error', () => rej(new Error(`Unable to preload CSS for ${dep}`)));\n            });\n        }\n    })).then(() => baseModule());\n}","export interface ThemeType {\n  name: string;\n  description: string;\n  dark: boolean;\n  bootswatch: boolean;\n}\nexport const themeList: ThemeType[] = [\n  {\n    name: 'Bootstrap',\n    description: 'Plain bootstrap default theme',\n    dark: false,\n    bootswatch: false,\n  },\n  {\n    name: 'Bootstrap_dark',\n    description: 'Plain dark bootstrap default theme',\n    dark: true,\n    bootswatch: false,\n  },\n  {\n    name: 'Cerulean',\n    description: 'A calm blue sky',\n    dark: false,\n    bootswatch: true,\n  },\n  {\n    name: 'Cosmo',\n    description: 'An ode to Metro',\n    dark: false,\n    bootswatch: true,\n  },\n\n  {\n    name: 'Cyborg',\n    description: 'Jet black and electric blue',\n    dark: true,\n    bootswatch: true,\n  },\n\n  {\n    name: 'Darkly',\n    description: 'Flatly in night mode',\n    dark: true,\n    bootswatch: true,\n  },\n\n  {\n    name: 'Flatly',\n    description: 'Flat and modern',\n    dark: false,\n    bootswatch: true,\n  },\n\n  {\n    name: 'Journal',\n    description: 'Crisp like a new sheet of paper',\n    dark: false,\n    bootswatch: true,\n  },\n\n  {\n    name: 'Litera',\n    description: 'The medium is the message',\n    dark: false,\n    bootswatch: true,\n  },\n\n  {\n    name: 'Lumen',\n    description: 'Light and shadow',\n    dark: false,\n    bootswatch: true,\n  },\n\n  {\n    name: 'Lux',\n    description: 'A touch of class',\n    dark: false,\n    bootswatch: true,\n  },\n\n  {\n    name: 'Materia',\n    description: 'Material is the metaphor',\n    dark: false,\n    bootswatch: true,\n  },\n\n  {\n    name: 'Minty',\n    description: 'A fresh feel',\n    dark: false,\n    bootswatch: true,\n  },\n\n  {\n    name: 'Pulse',\n    description: 'A trace of purple',\n    dark: false,\n    bootswatch: true,\n  },\n\n  {\n    name: 'Sandstone',\n    description: 'A touch of warmth',\n    dark: false,\n    bootswatch: true,\n  },\n\n  {\n    name: 'Simplex',\n    description: 'Mini and minimalist',\n    dark: false,\n    bootswatch: true,\n  },\n\n  {\n    name: 'Sketchy',\n    description: 'A hand-drawn look for mockups and mirth',\n    dark: false,\n    bootswatch: true,\n  },\n\n  {\n    name: 'Slate',\n    description: 'Shades of gunmetal gray',\n    dark: true,\n    bootswatch: true,\n  },\n\n  {\n    name: 'Solar',\n    description: 'A spin on Solarized',\n    dark: true,\n    bootswatch: true,\n  },\n\n  {\n    name: 'Spacelab',\n    description: 'Silvery and sleek',\n    dark: false,\n    bootswatch: true,\n  },\n\n  {\n    name: 'Superhero',\n    description: 'The brave and the blue',\n    dark: true,\n    bootswatch: true,\n  },\n\n  {\n    name: 'United',\n    description: 'Ubuntu orange and unique font',\n    dark: false,\n    bootswatch: true,\n  },\n\n  {\n    name: 'Yeti',\n    description: 'A friendly foundation',\n    dark: false,\n    bootswatch: true,\n  },\n];\n\nexport function storeCurrentTheme(themeName: string) {\n  window.localStorage.theme = themeName;\n}\n\nexport function getTheme(theme: string): ThemeType | undefined {\n  if (theme !== undefined) {\n    return themeList.find((item) => item.name.toLowerCase() === theme.toLowerCase());\n  }\n  return undefined;\n}\n\nexport function getCurrentTheme(): string {\n  const { theme } = window.localStorage;\n  return theme;\n}\n","<template>\n  <div>\n    <b-nav-item-dropdown\n      v-if=\"!simple\"\n      id=\"my-nav-dropdown\"\n      text=\"Theme\"\n      toggle-class=\"nav-link-custom\"\n      right\n      lazy\n    >\n      <b-dropdown-item v-if=\"themeList.length === 0\">\n        <b-spinner small></b-spinner> Loading Themes...\n      </b-dropdown-item>\n\n      <!-- TODO Add  v-b-tooltip.hover.right==\"{ variant: 'className' }\" for tooltip class rendered from bootswatch-->\n      <b-dropdown-item-button\n        v-for=\"(theme, key) in themeList\"\n        :key=\"key\"\n        v-b-tooltip.hover.right\n        :active=\"activeTheme === theme.name\"\n        :title=\"theme.description\"\n        :name=\"theme.name\"\n        @click=\"handleClick\"\n        >{{ theme.name }}{{ theme.dark ? ' [dark]' : '' }}</b-dropdown-item-button\n      >\n    </b-nav-item-dropdown>\n    <b-link v-else variant=\"outline-primary\" class=\"nav-link\" @click=\"toggleNight\">\n      <ThemeLightDark :size=\"16\" />\n    </b-link>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport Vue from 'vue';\nimport axios from 'axios';\nimport ThemeLightDark from 'vue-material-design-icons/Brightness6.vue';\nimport { themeList } from '@/shared/themes';\nimport { mapActions } from 'vuex';\nimport { FTHTMLStyleElement } from '@/types/styleElement';\n\nexport default Vue.extend({\n  name: 'BootswatchThemeSelect',\n  components: { ThemeLightDark },\n  props: {\n    simple: {\n      type: Boolean,\n      default: true,\n    },\n  },\n  data() {\n    return {\n      activeTheme: '',\n      themeList,\n    };\n  },\n  mounted() {\n    // If a theme has been stored in localstorage, the theme will be set.\n    if (window.localStorage.theme) this.setTheme(window.localStorage.theme);\n  },\n  methods: {\n    ...mapActions(['setCurrentTheme']),\n    handleClick(e) {\n      this.setTheme(e.target.name.trim());\n    },\n    toggleNight() {\n      this.setTheme(this.activeTheme === 'bootstrap' ? 'bootstrap_dark' : 'bootstrap');\n    },\n    setTheme(themeName) {\n      // If theme is already active, do nothing.\n      if (this.activeTheme === themeName) {\n        return;\n      }\n      if (themeName.toLowerCase() === 'bootstrap' || themeName.toLowerCase() === 'bootstrap_dark') {\n        const styles = document.getElementsByTagName('style');\n        const bw = Array.from(styles).filter((w) => w.textContent?.includes('bootswatch'));\n        document.documentElement.setAttribute(\n          'data-theme',\n          themeName.toLowerCase() === 'bootstrap' ? 'light' : 'dark',\n        );\n        // Reset all bootswatch styles\n        bw.forEach((style, index) => {\n          (bw[index] as FTHTMLStyleElement).disabled = true;\n        });\n        if (this.simple && this.activeTheme) {\n          // Only transition if simple mode is active\n          document.documentElement.classList.add('ft-theme-transition');\n          window.setTimeout(() => {\n            document.documentElement.classList.remove('ft-theme-transition');\n          }, 1000);\n        }\n      } else {\n        // Dynamic import for a different theme, to avoid loading ALL themes.\n        import(`bootswatch/dist/${themeName.toLowerCase()}/bootstrap.min.css`).then((mod) => {\n          console.log('theme', mod);\n          document.documentElement.removeAttribute('data-theme');\n          const styles = document.getElementsByTagName('style');\n          const bw = Array.from(styles).filter((w) => w.textContent?.includes('bootswatch'));\n          bw.forEach((style, index) => {\n            if (!style.id) {\n              // If its a style that was just imported and hasn't been assigned an id.\n              bw[index].id = themeName;\n            } else if (style.id === themeName) {\n              // If it's a style that has been imported already.\n              (bw[index] as FTHTMLStyleElement).disabled = false;\n            } else {\n              // All other style themes should be disabled.\n              (bw[index] as FTHTMLStyleElement).disabled = true;\n            }\n          });\n        });\n      }\n      // Save the theme as localstorage\n      this.setCurrentTheme(themeName);\n      this.activeTheme = themeName;\n    },\n    fetchApi() {\n      // Fetches boostswatch api and dynamically sets themes.\n      // Not used, but useful for updating the static array of themes if bootswatch dependency is outdated.\n      axios\n        .get('https://bootswatch.com/api/4.json')\n        // .then((res) => {\n\n        // const { themes } = res.data;\n        // this.themes = themes;\n        // Use this code in the browser console and copy and paste the filteredThemes into this.themes\n        // console.log(themes);\n        // const filteredThemes = [];\n        // themes.forEach((item) =>\n        //   filteredThemes.push({ name: item.name, description: item.description }),\n        // );\n        // })\n        .catch((error) => {\n          console.error(error);\n        });\n    },\n  },\n});\n</script>\n\n<style scoped></style>\n","\n<div>\n  <b-nav-item-dropdown\n    v-if=\"!simple\"\n    id=\"my-nav-dropdown\"\n    text=\"Theme\"\n    toggle-class=\"nav-link-custom\"\n    right\n    lazy\n  >\n    <b-dropdown-item v-if=\"themeList.length === 0\">\n      <b-spinner small></b-spinner> Loading Themes...\n    </b-dropdown-item>\n\n    <!-- TODO Add  v-b-tooltip.hover.right==\"{ variant: 'className' }\" for tooltip class rendered from bootswatch-->\n    <b-dropdown-item-button\n      v-for=\"(theme, key) in themeList\"\n      :key=\"key\"\n      v-b-tooltip.hover.right\n      :active=\"activeTheme === theme.name\"\n      :title=\"theme.description\"\n      :name=\"theme.name\"\n      @click=\"handleClick\"\n      >{{ theme.name }}{{ theme.dark ? ' [dark]' : '' }}</b-dropdown-item-button\n    >\n  </b-nav-item-dropdown>\n  <b-link v-else variant=\"outline-primary\" class=\"nav-link\" @click=\"toggleNight\">\n    <ThemeLightDark :size=\"16\" />\n  </b-link>\n</div>\n","import { GridItemData } from 'vue-grid-layout';\n\nexport enum TradeLayout {\n  multiPane = 'g-multiPane',\n  openTrades = 'g-openTrades',\n  tradeHistory = 'g-tradeHistory',\n  tradeDetail = 'g-tradeDetail',\n /* chartView = 'g-chartView', */\n}\nexport enum PerLayout {\n  multiPane = 'g-multiPane',\n  openTrades = 'g-openTrades',\n  tradeHistory = 'g-tradeHistory',\n  tradeDetail = 'g-tradeDetail',\n /* chartView = 'g-chartView', */\n}\n\nexport enum DashboardLayout {\n  dailyChart = 'g-dailyChart',\n  botComparison = 'g-botComparison',\n  allOpenTrades = 'g-allOpenTrades',\n  cumChartChart = 'g-cumChartChart',\n  tradesLogChart = 'g-TradesLogChart',\n}\n\nexport enum LayoutGetters {\n  getDashboardLayoutSm = 'getDashboardLayoutSm',\n  getDashboardLayout = 'getDashboardLayout',\n  getTradingLayoutSm = 'getTradingLayoutSm',\n  getTradingLayout = 'getTradingLayout',\n  getLayoutLocked = 'getLayoutLocked',\n  getPerLayoutSm = 'getPerLayoutSm',\n  getPerLayout = 'getPerLayout',\n}\n\nexport enum LayoutActions {\n  setDashboardLayout = 'setDashboardLayout',\n  setTradingLayout = 'setTradingLayout',\n  setPerLayout = 'setPerLayout',\n  resetDashboardLayout = 'resetDashboardLayout',\n  resetTradingLayout = 'resetTradingLayout',\n  setLayoutLocked = 'setLayoutLocked',\n}\n\nexport enum LayoutMutations {\n  setDashboardLayout = 'setDashboardLayout',\n  setTradingLayout = 'setTradingLayout',\n  setLayoutLocked = 'setLayoutLocked',\n  setPerLayout = 'setPerLayout',\n}\n// Define default layouts\nconst DEFAULT_TRADING_LAYOUT: GridItemData[] = [\n  { i: TradeLayout.multiPane, x: 0, y: 0, w: 3, h: 35 },\n /* { i: TradeLayout.chartView, x: 3, y: 0, w: 9, h: 14 }, */\n  { i: TradeLayout.tradeDetail, x: 3, y: 5, w: 9, h: 6 }, \n  { i: TradeLayout.openTrades, x: 3, y: 0, w: 9, h: 5 },\n  { i: TradeLayout.tradeHistory, x: 3, y: 10, w: 9, h: 10 },\n];\n\n// Currently only multiPane is visible\nconst DEFAULT_TRADING_LAYOUT_SM: GridItemData[] = [\n  { i: TradeLayout.multiPane, x: 0, y: 0, w: 12, h: 10 },\n /* { i: TradeLayout.chartView, x: 0, y: 10, w: 12, h: 0 },  */\n  { i: TradeLayout.tradeDetail, x: 0, y: 19, w: 12, h: 0 }, \n  { i: TradeLayout.openTrades, x: 0, y: 8, w: 12, h: 0 },\n  { i: TradeLayout.tradeHistory, x: 0, y: 25, w: 12, h: 0 },\n];\nconst DEFAULT_PER_LAYOUT: GridItemData[] = [\n  { i: PerLayout.multiPane, x: 0, y: 0, w: 3, h: 35 },\n /* { i: TradeLayout.chartView, x: 3, y: 0, w: 9, h: 14 }, */\n  { i: PerLayout.tradeDetail, x: 3, y: 5, w: 9, h: 6 }, \n  { i: PerLayout.openTrades, x: 3, y: 0, w: 9, h: 5 },\n  { i: PerLayout.tradeHistory, x: 3, y: 10, w: 9, h: 10 },\n];\n\n// Currently only multiPane is visible\nconst DEFAULT_PER_LAYOUT_SM: GridItemData[] = [\n  { i: PerLayout.multiPane, x: 0, y: 0, w: 12, h: 10 },\n /* { i: TradeLayout.chartView, x: 0, y: 10, w: 12, h: 0 },  */\n  { i: PerLayout.tradeDetail, x: 0, y: 19, w: 12, h: 0 }, \n  { i: PerLayout.openTrades, x: 0, y: 8, w: 12, h: 0 },\n  { i: PerLayout.tradeHistory, x: 0, y: 25, w: 12, h: 0 },\n];\n\nconst DEFAULT_DASHBOARD_LAYOUT: GridItemData[] = [\n  { i: DashboardLayout.botComparison, x: 0, y: 0, w: 8, h: 6 } /* Bot Comparison */,\n  { i: DashboardLayout.dailyChart, x: 8, y: 0, w: 4, h: 6 },\n  { i: DashboardLayout.allOpenTrades, x: 0, y: 6, w: 8, h: 6 },\n  { i: DashboardLayout.cumChartChart, x: 8, y: 6, w: 4, h: 6 },\n  { i: DashboardLayout.tradesLogChart, x: 0, y: 12, w: 12, h: 4 },\n];\n\nconst DEFAULT_DASHBOARD_LAYOUT_SM: GridItemData[] = [\n  { i: DashboardLayout.botComparison, x: 0, y: 0, w: 12, h: 6 } /* Bot Comparison */,\n  { i: DashboardLayout.allOpenTrades, x: 0, y: 6, w: 12, h: 8 },\n  { i: DashboardLayout.dailyChart, x: 0, y: 14, w: 12, h: 6 },\n  { i: DashboardLayout.cumChartChart, x: 0, y: 20, w: 12, h: 6 },\n  { i: DashboardLayout.tradesLogChart, x: 0, y: 26, w: 12, h: 4 },\n];\n\nconst STORE_DASHBOARD_LAYOUT = 'ftDashboardLayout';\nconst STORE_TRADING_LAYOUT = 'ftTradingLayout';\nconst STORE_LAYOUT_LOCK = 'ftLayoutLocked';\nconst STORE_PER_LAYOUT = 'ftPerLayout';\n\nfunction getLayoutLocked() {\n  const fromStore = localStorage.getItem(STORE_LAYOUT_LOCK);\n  if (fromStore) {\n    return JSON.parse(fromStore);\n  }\n  return true;\n}\n\nfunction getLayout(storageString: string, defaultLayout: GridItemData[]) {\n  const fromStore = localStorage.getItem(storageString);\n  if (fromStore) {\n    return JSON.parse(fromStore);\n  }\n\n  return JSON.parse(JSON.stringify(defaultLayout));\n}\n\n/**\n * Helper function finding a layout entry\n * @param gridLayout Array of grid layouts used in this layout. Must be passed to GridLayout, too.\n * @param name Name within the dashboard layout to find\n */\nexport function findGridLayout(gridLayout: GridItemData[], name: string): GridItemData {\n  let layout = gridLayout.find((value) => value.i === name);\n  if (!layout) {\n    layout = { i: name, x: 0, y: 0, w: 4, h: 6 };\n  }\n  return layout;\n}\n\nexport default {\n  namespaced: true,\n  state: {\n    dashboardLayout: getLayout(STORE_DASHBOARD_LAYOUT, DEFAULT_DASHBOARD_LAYOUT),\n    tradingLayout: getLayout(STORE_TRADING_LAYOUT, DEFAULT_TRADING_LAYOUT),\n    layoutLocked: getLayoutLocked(),\n    perLayout: getLayout(STORE_PER_LAYOUT, DEFAULT_PER_LAYOUT),\n  },\n\n  getters: {\n    [LayoutGetters.getDashboardLayoutSm]() {\n      return [...DEFAULT_DASHBOARD_LAYOUT_SM];\n    },\n    [LayoutGetters.getDashboardLayout](state) {\n      return state.dashboardLayout;\n    },\n    [LayoutGetters.getTradingLayoutSm]() {\n      return [...DEFAULT_TRADING_LAYOUT_SM];\n    },\n    [LayoutGetters.getTradingLayout](state) {\n      return state.tradingLayout;\n    },\n    [LayoutGetters.getLayoutLocked](state) {\n      return state.layoutLocked;\n    },\n    [LayoutGetters.getPerLayoutSm]() {\n      return [...DEFAULT_PER_LAYOUT_SM];\n    },\n    [LayoutGetters.getPerLayout](state) {\n      return state.perLayout;\n    },\n  },\n\n  mutations: {\n    [LayoutMutations.setDashboardLayout](state, layout) {\n      state.dashboardLayout = layout;\n      localStorage.setItem(STORE_DASHBOARD_LAYOUT, JSON.stringify(layout));\n    },\n    [LayoutMutations.setTradingLayout](state, layout) {\n      state.tradingLayout = layout;\n      localStorage.setItem(STORE_TRADING_LAYOUT, JSON.stringify(layout));\n    },\n    [LayoutMutations.setLayoutLocked](state, locked: boolean) {\n      state.layoutLocked = locked;\n      localStorage.setItem(STORE_LAYOUT_LOCK, JSON.stringify(locked));\n    },\n    [LayoutMutations.setPerLayout](state, layout) {\n      state.tradingLayout = layout;\n      localStorage.setItem(STORE_PER_LAYOUT, JSON.stringify(layout));\n    },\n  },\n\n  actions: {\n    [LayoutActions.setDashboardLayout]({ commit }, layout) {\n      commit(LayoutMutations.setDashboardLayout, layout);\n    },\n    [LayoutActions.setTradingLayout]({ commit }, layout) {\n      commit(LayoutMutations.setTradingLayout, layout);\n    },\n    [LayoutActions.setPerLayout]({ commit }, layout) {\n      commit(LayoutMutations.setPerLayout, layout);\n    },\n    [LayoutActions.setLayoutLocked]({ commit }, locked: boolean) {\n      commit(LayoutMutations.setLayoutLocked, locked);\n    },\n    [LayoutActions.resetDashboardLayout]({ commit }) {\n      commit(\n        LayoutMutations.setDashboardLayout,\n        JSON.parse(JSON.stringify(DEFAULT_DASHBOARD_LAYOUT)),\n      );\n    },\n\n    [LayoutActions.resetTradingLayout]({ commit }) {\n      commit(LayoutMutations.setTradingLayout, JSON.parse(JSON.stringify(DEFAULT_TRADING_LAYOUT)));\n    },\n  },\n};\n","import { parse, toDate, getHours } from 'date-fns';\nimport { format, utcToZonedTime } from 'date-fns-tz';\nimport humanizeDuration from 'humanize-duration';\n\nexport function isUndefined(val): boolean {\n  return val === undefined || val === null;\n}\n\nexport function formatPercent(value: number, decimals = 3): string {\n  return !isUndefined(value) ? `${(value * 100).toFixed(decimals)}%` : '';\n}\n\n/**\n * Format number to `decimals` without trailing zeros\n * @param value Number to format\n * @param decimals number of decimals (Defaults to 8)\n * @returns Formatted string\n */\nexport function formatPrice(value: number, decimals = 8): string {\n  return !isUndefined(value) ? parseFloat(value.toFixed(decimals)).toString() : '';\n}\n\n/**\n * Formats price in the format \"<price> <StakeCurrency>\" using \"deciaml\" decimals\n * @param price Price to format\n * @param currency currency to use\n * @param decimals Decimals\n * @returns\n */\nexport function formatPriceCurrency(price, currency: string, decimals = 3) {\n  return `${formatPrice(price, decimals)} ${currency}`;\n}\n\nexport function dateFromString(datestring: string, format: string): Date {\n  return parse(datestring, format, 0);\n}\n\nlet locTimeZone = 'UTC';\n\n/**\n * Set global timezone to use by conversion functions\n * @param tz Timezone to set\n */\nexport function setTimezone(tz: string) {\n  locTimeZone = tz;\n}\n\nfunction getTimeZone(tz?: string): string {\n  return tz || locTimeZone;\n}\n\n/**\n *\n * @param ts Convert timestamp or Date to datetime (in correct timezone)\n * @param timezone timezone to use\n * @returns Date object (in timezone)\n */\nfunction convertToDate(ts: number | Date, timezone?: string): Date {\n  const date = toDate(ts);\n  const currentTz = Intl.DateTimeFormat().resolvedOptions().timeZone;\n  if (getTimeZone(timezone) === 'UTC') {\n    return utcToZonedTime(date, currentTz);\n  }\n  return date;\n}\n\n/**\n * Convert a timestamp / Date object to String\n * @param ts Timestamp as number or date (in utc!!)\n */\nexport function timestampms(ts: number | Date): string {\n  return format(convertToDate(ts), 'yyyy-MM-dd HH:mm:ss', { timeZone: locTimeZone });\n}\n\n/**\n * Convert a timestamp / Date object to String\n * @param ts Timestamp as number or date (in utc!!)\n * @param timezone timezone to use\n * @returns formatted date in desired timezone (or globally configured timezone)\n */\nexport function timestampmsWithTimezone(ts: number | Date, timezone?: string): string {\n  return format(convertToDate(ts, timezone), 'yyyy-MM-dd HH:mm:ss (z)', {\n    timeZone: getTimeZone(timezone),\n  });\n}\n\n/**\n * Converts timestamp or Date object to yyyy-MM-dd format.\n * @param ts\n */\nexport function timestampToDateString(ts: number | Date): string {\n  return format(convertToDate(ts), 'yyyy-MM-dd');\n}\n\n/**\n * Converts a String of the format yyyy-MM-dd to YYYYMMDD. To be used as timerange.\n * @param datestring Input string (in the format yyyy-MM-dd)\n */\nexport function dateStringToTimeRange(datestring: string): string {\n  return datestring.replace(/-/g, '');\n}\n\nexport function timestampHour(ts: number): number {\n  return getHours(convertToDate(ts));\n}\n\n/**\n *  Get humanized Duration from seconds\n * @param duration Duration in seconds\n */\nexport function humanizeDurationFromSeconds(duration: number): string {\n  return humanizeDuration(duration * 1000);\n}\n\nexport default {\n  formatPrice,\n  formatPercent,\n  timestampms,\n  timestampmsWithTimezone,\n  timestampToDateString,\n  dateStringToTimeRange,\n  setTimezone,\n};\n","import { setTimezone } from '@/shared/formatters';\n\nconst STORE_UI_SETTINGS = 'ftUISettings';\n\nexport enum OpenTradeVizOptions {\n  showPill = 'showPill',\n  asTitle = 'asTitle',\n  noOpenTrades = 'noOpenTrades',\n}\n\nexport enum SettingsGetters {\n  openTradesInTitle = 'openTradesInTitle',\n  timezone = 'timezone',\n  backgroundSync = 'backgroundSync',\n}\n\nexport enum SettingsActions {\n  setOpenTradesInTitle = 'setOpenTradesInTitle',\n  setTimeZone = 'setTimeZone',\n  setBackgroundSync = 'setBackgroundSync',\n}\n\nexport enum SettingsMutations {\n  setOpenTrades = 'setOpenTrades',\n  setTimeZone = 'setTimeZone',\n  setBackgroundSync = 'setBackgroundSync',\n}\n\nexport interface SettingsType {\n  openTradesInTitle: string;\n  timezone: string;\n  backgroundSync: boolean;\n}\n\nfunction getSettings() {\n  const fromStore = localStorage.getItem(STORE_UI_SETTINGS);\n  if (fromStore) {\n    return JSON.parse(fromStore);\n  }\n  return {};\n}\nconst storedSettings = getSettings();\n\nfunction updateSetting(key: string, value: string | boolean) {\n  const settings = getSettings() || {};\n  settings[key] = value;\n  localStorage.setItem(STORE_UI_SETTINGS, JSON.stringify(settings));\n}\n\nconst state: SettingsType = {\n  openTradesInTitle: storedSettings?.openTradesInTitle || OpenTradeVizOptions.showPill,\n  timezone: storedSettings.timezone || 'UTC',\n  backgroundSync: storedSettings.backgroundSync || true,\n};\n\nexport default {\n  namespaced: true,\n  state,\n  getters: {\n    [SettingsGetters.openTradesInTitle](state): string {\n      return state.openTradesInTitle;\n    },\n    [SettingsGetters.timezone](state): string {\n      return state.timezone;\n    },\n    [SettingsGetters.backgroundSync](state): boolean {\n      return state.backgroundSync;\n    },\n  },\n  mutations: {\n    [SettingsMutations.setOpenTrades](state, value: string) {\n      state.openTradesInTitle = value;\n      updateSetting('openTradesInTitle', value);\n    },\n    [SettingsMutations.setTimeZone](state, timezone: string) {\n      state.timezone = timezone;\n      updateSetting('timezone', timezone);\n    },\n    [SettingsMutations.setBackgroundSync](state, backgroundSync: boolean) {\n      state.backgroundSync = backgroundSync;\n      updateSetting('backgroundSync', backgroundSync);\n    },\n  },\n  actions: {\n    [SettingsActions.setOpenTradesInTitle]({ commit }, locked: boolean) {\n      commit(SettingsMutations.setOpenTrades, locked);\n    },\n    [SettingsActions.setTimeZone]({ commit }, timezone: string) {\n      setTimezone(timezone);\n      commit(SettingsMutations.setTimeZone, timezone);\n    },\n    [SettingsActions.setBackgroundSync]({ commit }, timezone: string) {\n      commit(SettingsMutations.setBackgroundSync, timezone);\n    },\n  },\n};\n","<template>\n  <div class=\"d-flex flex-align-center ml-2\">\n    <b-form-checkbox\n      v-model=\"autoRefreshLoc\"\n      class=\"ml-auto float-right my-auto\"\n      title=\"AutoRefresh\"\n    ></b-form-checkbox>\n    <b-button\n      class=\"m-1\"\n      variant=\"secondary\"\n      size=\"sm\"\n      title=\"Auto Refresh All bots\"\n      @click=\"allRefreshFull\"\n    >\n      <RefreshIcon :size=\"16\" />\n    </b-button>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Component, Vue } from 'vue-property-decorator';\nimport { namespace } from 'vuex-class';\nimport RefreshIcon from 'vue-material-design-icons/Refresh.vue';\nimport { MultiBotStoreGetters } from '@/store/modules/botStoreWrapper';\nimport StoreModules from '@/store/storeSubModules';\n\nconst ftbot = namespace(StoreModules.ftbot);\n\n@Component({ components: { RefreshIcon } })\nexport default class ReloadControl extends Vue {\n  refreshInterval: number | null = null;\n\n  refreshIntervalSlow: number | null = null;\n\n  @ftbot.Getter [MultiBotStoreGetters.globalAutoRefresh]!: boolean;\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  @ftbot.Action setGlobalAutoRefresh!: (newValue: boolean) => void;\n\n  @ftbot.Action allRefreshFull;\n\n  get autoRefreshLoc() {\n    return this.globalAutoRefresh;\n  }\n\n  set autoRefreshLoc(newValue: boolean) {\n    this.setGlobalAutoRefresh(newValue);\n  }\n}\n</script>\n\n<style scoped></style>\n","\n<div class=\"d-flex flex-align-center ml-2\">\n  <b-form-checkbox\n    v-model=\"autoRefreshLoc\"\n    class=\"ml-auto float-right my-auto\"\n    title=\"AutoRefresh\"\n  ></b-form-checkbox>\n  <b-button\n    class=\"m-1\"\n    variant=\"secondary\"\n    size=\"sm\"\n    title=\"Auto Refresh All bots\"\n    @click=\"allRefreshFull\"\n  >\n    <RefreshIcon :size=\"16\" />\n  </b-button>\n</div>\n","<template>\n  <div class=\"d-flex align-items-center justify-content-between w-100\">\n    <span class=\"mr-2\">{{ bot.botName || bot.botId }}</span>\n\n    <div class=\"align-items-center d-flex\">\n      <span class=\"ml-2 mr-1 align-middle\">{{\n        allIsBotOnline[bot.botId] ? '&#128994;' : '&#128308;'\n      }}</span>\n      <b-form-checkbox\n        v-model=\"autoRefreshLoc\"\n        class=\"ml-auto float-right mr-2 my-auto\"\n        title=\"AutoRefresh\"\n        variant=\"secondary\"\n        @change=\"changeEvent\"\n      >\n        R\n      </b-form-checkbox>\n      <div v-if=\"!noButtons\" class=\"d-flex flex-align-cent\">\n        <!-- <b-button class=\"ml-1\" size=\"sm\" title=\"Edit bot\">\n          <EditIcon :size=\"16\" title=\"Edit Button\" />\n        </b-button> -->\n        <b-button class=\"ml-1\" size=\"sm\" title=\"Delete bot\" @click.prevent=\"clickRemoveBot(bot)\">\n          <DeleteIcon :size=\"16\" title=\"Delete Bot\" />\n        </b-button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Component, Prop, Vue } from 'vue-property-decorator';\nimport { namespace } from 'vuex-class';\nimport { MultiBotStoreGetters } from '@/store/modules/botStoreWrapper';\nimport LoginModal from '@/views/LoginModal.vue';\nimport EditIcon from 'vue-material-design-icons/Cog.vue';\nimport DeleteIcon from 'vue-material-design-icons/Delete.vue';\nimport { BotDescriptor, BotDescriptors } from '@/types';\nimport StoreModules from '@/store/storeSubModules';\n\nconst ftbot = namespace(StoreModules.ftbot);\n\n@Component({ components: { LoginModal, DeleteIcon, EditIcon } })\nexport default class BotList extends Vue {\n  @Prop({ default: false, type: Object }) bot!: BotDescriptor;\n\n  @Prop({ default: false, type: Boolean }) noButtons!: boolean;\n\n  @ftbot.Getter [MultiBotStoreGetters.allIsBotOnline];\n\n  @ftbot.Getter [MultiBotStoreGetters.allAutoRefresh];\n\n  @ftbot.Getter [MultiBotStoreGetters.allAvailableBots]: BotDescriptors;\n\n  @ftbot.Action removeBot;\n\n  @ftbot.Action selectBot;\n\n  get autoRefreshLoc() {\n    return this.allAutoRefresh[this.bot.botId];\n  }\n\n  set autoRefreshLoc(v) {\n    // Dummy setter - Set via change event to avoid bouncing\n  }\n\n  changeEvent(v) {\n    this.$store.dispatch(`ftbot/${this.bot.botId}/setAutoRefresh`, v);\n  }\n\n  clickRemoveBot(bot: BotDescriptor) {\n    //\n    this.$bvModal\n      .msgBoxConfirm(`Really remove (logout) from '${bot.botName}' (${bot.botId})?`)\n      .then((value: boolean) => {\n        if (value) {\n          this.removeBot(bot.botId);\n        }\n      });\n  }\n}\n</script>\n\n<style scoped></style>\n","\n<div class=\"d-flex align-items-center justify-content-between w-100\">\n  <span class=\"mr-2\">{{ bot.botName || bot.botId }}</span>\n\n  <div class=\"align-items-center d-flex\">\n    <span class=\"ml-2 mr-1 align-middle\">{{\n      allIsBotOnline[bot.botId] ? '&#128994;' : '&#128308;'\n    }}</span>\n    <b-form-checkbox\n      v-model=\"autoRefreshLoc\"\n      class=\"ml-auto float-right mr-2 my-auto\"\n      title=\"AutoRefresh\"\n      variant=\"secondary\"\n      @change=\"changeEvent\"\n    >\n      R\n    </b-form-checkbox>\n    <div v-if=\"!noButtons\" class=\"d-flex flex-align-cent\">\n      <!-- <b-button class=\"ml-1\" size=\"sm\" title=\"Edit bot\">\n        <EditIcon :size=\"16\" title=\"Edit Button\" />\n      </b-button> -->\n      <b-button class=\"ml-1\" size=\"sm\" title=\"Delete bot\" @click.prevent=\"clickRemoveBot(bot)\">\n        <DeleteIcon :size=\"16\" title=\"Delete Bot\" />\n      </b-button>\n    </div>\n  </div>\n</div>\n","<template>\n  <div v-if=\"botCount > 0\">\n    <h3 v-if=\"!small\" style=\"color: red;\">Let's start Trading!!!</h3>\n    <b-list-group>\n      <b-list-group-item\n        v-for=\"bot in allAvailableBots\"\n        :key=\"bot.botId\"\n        :active=\"bot.botId === selectedBot\"\n        button\n        :title=\"`${bot.botId} - ${bot.botName} - ${bot.botUrl}`\"\n        @click=\"selectBot(bot.botId)\"\n      >\n        <bot-entry :bot=\"bot\" :no-buttons=\"small\" />\n      </b-list-group-item>\n    </b-list-group>\n    <LoginModal v-if=\"!small\" class=\"mt-2\" login-text=\"Add new bot\" />\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Component, Prop, Vue } from 'vue-property-decorator';\nimport { namespace } from 'vuex-class';\nimport { MultiBotStoreGetters } from '@/store/modules/botStoreWrapper';\nimport LoginModal from '@/views/LoginModal.vue';\nimport BotEntry from '@/components/BotEntry.vue';\nimport { BotDescriptors } from '@/types';\nimport StoreModules from '@/store/storeSubModules';\n\nconst ftbot = namespace(StoreModules.ftbot);\n\n@Component({ components: { LoginModal, BotEntry } })\nexport default class BotList extends Vue {\n  @Prop({ default: false, type: Boolean }) small!: boolean;\n\n  @ftbot.Getter [MultiBotStoreGetters.botCount]: number;\n\n  @ftbot.Getter [MultiBotStoreGetters.selectedBot]: string;\n\n  @ftbot.Getter [MultiBotStoreGetters.allIsBotOnline]: Record<string, boolean>;\n\n  @ftbot.Getter [MultiBotStoreGetters.allAvailableBots]: BotDescriptors;\n\n  @ftbot.Action selectBot;\n}\n</script>\n\n<style scoped></style>\n","\n<div v-if=\"botCount > 0\">\n  <h3 v-if=\"!small\" style=\"color: red;\">Let's start Trading!!!</h3>\n  <b-list-group>\n    <b-list-group-item\n      v-for=\"bot in allAvailableBots\"\n      :key=\"bot.botId\"\n      :active=\"bot.botId === selectedBot\"\n      button\n      :title=\"`${bot.botId} - ${bot.botName} - ${bot.botUrl}`\"\n      @click=\"selectBot(bot.botId)\"\n    >\n      <bot-entry :bot=\"bot\" :no-buttons=\"small\" />\n    </b-list-group-item>\n  </b-list-group>\n  <LoginModal v-if=\"!small\" class=\"mt-2\" login-text=\"Add new bot\" />\n</div>\n","<template>\n  <header>\n    <b-navbar toggleable=\"sm\" type=\"dark\" variant=\"primary\">\n      <router-link class=\"navbar-brand\" exact to=\"/\">\n\n        <span class=\"navbar-brand-title d-sm-none d-md-inline\" style =\"font-size : 35px\" >START</span>\n      </router-link>\n\n      <!-- TODO: For XS breakpoint, this should be here...  -->\n      <!-- <ReloadControl class=\"mr-3\" /> -->\n      <b-navbar-toggle target=\"nav-collapse\"></b-navbar-toggle>\n\n      <b-collapse id=\"nav-collapse\" class=\"text-right text-md-center\" is-nav>\n        <b-navbar-nav>\n          <router-link v-if=\"!canRunBacktest\" class=\"nav-link navbar-nav\" to=\"/trade\" style =\"font-size : 35px\"\n            >Trading</router-link\n          >\n          <router-link v-if=\"!canRunBacktest\" class=\"nav-link navbar-nav\" to=\"/dashboard\" style =\"font-size : 35px\"\n            >Dashboard</router-link\n          >\n          <router-link class=\"nav-link navbar-nav\" to=\"/graph\" style =\"font-size : 35px\">Charts</router-link>\n\n          <router-link v-if=\"canRunBacktest\" class=\"nav-link navbar-nav\" to=\"/backtest\"\n            >Backtest</router-link>\n          <router-link v-if=\"!canRunBacktest\" class=\"nav-link navbar-nav\" to=\"/Per\" style =\"font-size : 35px\"\n            >Performance</router-link>\n        </b-navbar-nav>\n\n        <!-- Right aligned nav items -->\n         <b-navbar-nav class=\"ml-auto\" menu-class=\"w-100\">\n          <!-- TODO This should show outside of the dropdown in XS mode -->\n\n          <li v-if=\"hasBots\" class=\"nav-item\">\n            <!-- Hide dropdown on xs, instead show below  -->\n            <b-nav-item-dropdown right class=\"d-none d-sm-block\">\n              <template #button-content>\n                <b-avatar size=\"2em\" button>FT</b-avatar>\n              </template>\n\n              <router-link\n                v-if=\"botCount === 1\"\n                class=\"dropdown-item\"\n                to=\"/\"\n                @click.native=\"clickLogout()\"\n                >Sign Out</router-link\n              >\n            </b-nav-item-dropdown>\n            <div class=\"d-block d-sm-none\">\n              <!-- Visible only on XS -->\n              <li class=\"nav-item text-secondary ml-2 d-sm-none d-flex justify-content-between\">\n                <div class=\"d-flex\">\n                  <b-nav-text class=\"verticalCenter small mr-2\">\n                    {{ botName || 'No bot selected' }}\n                  </b-nav-text>\n                  <b-nav-text class=\"verticalCenter\">\n                    {{ isBotOnline ? 'Online' : 'Offline' }}\n                  </b-nav-text>\n                </div>\n              </li>\n\n              <router-link\n                v-if=\"botCount === 1\"\n                class=\"nav-link navbar-nav\"\n                to=\"/\"\n                @click.native=\"clickLogout()\"\n                >Sign Out</router-link\n              >\n            </div>\n          </li>\n          <li v-else>\n            <!-- should open Modal window! -->\n            <LoginModal />\n          </li>\n        </b-navbar-nav>\n      </b-collapse>\n    </b-navbar>\n  </header>\n</template>\n\n<script lang=\"ts\">\nimport { Component, Vue, Watch } from 'vue-property-decorator';\nimport LoginModal from '@/views/LoginModal.vue';\nimport { Action, namespace, Getter } from 'vuex-class';\nimport BootswatchThemeSelect from '@/components/BootswatchThemeSelect.vue';\nimport { LayoutActions, LayoutGetters } from '@/store/modules/layout';\nimport { BotStoreGetters } from '@/store/modules/ftbot';\nimport Favico from 'favico.js';\nimport { OpenTradeVizOptions, SettingsGetters } from '@/store/modules/settings';\nimport { MultiBotStoreGetters } from '@/store/modules/botStoreWrapper';\nimport ReloadControl from '@/components/ftbot/ReloadControl.vue';\nimport BotEntry from '@/components/BotEntry.vue';\nimport BotList from '@/components/BotList.vue';\nimport { BotDescriptor } from '@/types';\nimport StoreModules from '@/store/storeSubModules';\n\nconst ftbot = namespace(StoreModules.ftbot);\nconst layoutNs = namespace(StoreModules.layout);\nconst uiSettingsNs = namespace(StoreModules.uiSettings);\n\n@Component({\n  components: { LoginModal, BootswatchThemeSelect, ReloadControl, BotEntry, BotList },\n})\nexport default class NavBar extends Vue {\n  pingInterval: number | null = null;\n\n  botSelectOpen = false;\n\n  @Action setLoggedIn;\n\n  @Action loadUIVersion;\n\n  @Getter getUiVersion!: string;\n\n  @ftbot.Action pingAll;\n\n  @ftbot.Action allGetState;\n\n  @ftbot.Action logout;\n\n  @ftbot.Getter [BotStoreGetters.isBotOnline]!: boolean;\n\n  @ftbot.Getter [MultiBotStoreGetters.hasBots]: boolean;\n\n  @ftbot.Getter [MultiBotStoreGetters.botCount]: number;\n\n  @ftbot.Getter [BotStoreGetters.botName]: string;\n\n  @ftbot.Getter [BotStoreGetters.openTradeCount]: number;\n\n  @ftbot.Getter [BotStoreGetters.canRunBacktest]!: boolean;\n\n  @ftbot.Getter [MultiBotStoreGetters.selectedBotObj]!: BotDescriptor;\n\n  @layoutNs.Getter [LayoutGetters.getLayoutLocked]: boolean;\n\n  @layoutNs.Action [LayoutActions.resetDashboardLayout];\n\n  @layoutNs.Action [LayoutActions.resetTradingLayout];\n\n  @layoutNs.Action [LayoutActions.setLayoutLocked];\n\n  @uiSettingsNs.Getter [SettingsGetters.openTradesInTitle]: string;\n\n  favicon: Favico | undefined = undefined;\n\n  mounted() {\n    this.pingAll();\n    this.loadUIVersion();\n    this.pingInterval = window.setInterval(this.pingAll, 60000);\n\n    if (this.hasBots) {\n      // Query botstate - this will enable / disable certain modes\n      this.allGetState();\n    }\n  }\n\n  beforeDestroy() {\n    if (this.pingInterval) {\n      clearInterval(this.pingInterval);\n    }\n  }\n\n  clickLogout(): void {\n    this.logout();\n    // TODO: This should be per bot\n    this.setLoggedIn(false);\n  }\n\n  get layoutLockedLocal() {\n    return this.getLayoutLocked;\n  }\n\n  set layoutLockedLocal(value: boolean) {\n    this.setLayoutLocked(value);\n  }\n\n  setOpenTradesAsPill(tradeCount: number) {\n    if (!this.favicon) {\n      this.favicon = new Favico({\n        animation: 'none',\n        // position: 'up',\n        // fontStyle: 'normal',\n        // bgColor: '#',\n        // textColor: '#FFFFFF',\n      });\n    }\n    if (tradeCount !== 0 && this.openTradesInTitle === 'showPill') {\n      this.favicon.badge(tradeCount);\n    } else {\n      this.favicon.reset();\n      console.log('reset');\n    }\n  }\n\n  resetDynamicLayout(): void {\n    const route = this.$router.currentRoute.path;\n    console.log(`resetLayout called for ${route}`);\n    switch (route) {\n      case '/trade':\n        this.resetTradingLayout();\n        break;\n      case '/dashboard':\n        this.resetDashboardLayout();\n        break;\n      default:\n    }\n  }\n\n  setTitle() {\n    let title = 'TUK Test UI';\n    if (this.openTradesInTitle === OpenTradeVizOptions.asTitle) {\n      title = `(${this.openTradeCount}) ${title}`;\n    }\n    if (this.botName) {\n      title = `${title} - ${this.botName}`;\n    }\n    document.title = title;\n  }\n\n  @Watch(BotStoreGetters.botName)\n  botnameChanged() {\n    this.setTitle();\n  }\n\n  @Watch(BotStoreGetters.openTradeCount)\n  openTradeCountChanged() {\n    console.log('openTradeCount changed');\n    if (this.openTradesInTitle === OpenTradeVizOptions.showPill) {\n      this.setOpenTradesAsPill(this.openTradeCount);\n    } else if (this.openTradesInTitle === OpenTradeVizOptions.asTitle) {\n      this.setTitle();\n    }\n  }\n\n  @Watch(SettingsGetters.openTradesInTitle)\n  openTradesSettingChanged() {\n    this.setTitle();\n    this.setOpenTradesAsPill(this.openTradeCount);\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n\n.dropdown-toggle::after {\n  display: none;\n}\n\n.navbar-brand-title {\n  padding-left: 0.5em;\n}\n.navbar {\n  padding: 0.1rem 0.1rem;\n}\n\n.router-link-active,\n.nav-link:active {\n  color: white !important;\n}\n\n.verticalCenter {\n  align-items: center;\n  display: inline-flex;\n  height: 100%;\n}\n</style>\n","\n<header>\n  <b-navbar toggleable=\"sm\" type=\"dark\" variant=\"primary\">\n    <router-link class=\"navbar-brand\" exact to=\"/\">\n\n      <span class=\"navbar-brand-title d-sm-none d-md-inline\" style =\"font-size : 35px\" >START</span>\n    </router-link>\n\n    <!-- TODO: For XS breakpoint, this should be here...  -->\n    <!-- <ReloadControl class=\"mr-3\" /> -->\n    <b-navbar-toggle target=\"nav-collapse\"></b-navbar-toggle>\n\n    <b-collapse id=\"nav-collapse\" class=\"text-right text-md-center\" is-nav>\n      <b-navbar-nav>\n        <router-link v-if=\"!canRunBacktest\" class=\"nav-link navbar-nav\" to=\"/trade\" style =\"font-size : 35px\"\n          >Trading</router-link\n        >\n        <router-link v-if=\"!canRunBacktest\" class=\"nav-link navbar-nav\" to=\"/dashboard\" style =\"font-size : 35px\"\n          >Dashboard</router-link\n        >\n        <router-link class=\"nav-link navbar-nav\" to=\"/graph\" style =\"font-size : 35px\">Charts</router-link>\n\n        <router-link v-if=\"canRunBacktest\" class=\"nav-link navbar-nav\" to=\"/backtest\"\n          >Backtest</router-link>\n        <router-link v-if=\"!canRunBacktest\" class=\"nav-link navbar-nav\" to=\"/Per\" style =\"font-size : 35px\"\n          >Performance</router-link>\n      </b-navbar-nav>\n\n      <!-- Right aligned nav items -->\n       <b-navbar-nav class=\"ml-auto\" menu-class=\"w-100\">\n        <!-- TODO This should show outside of the dropdown in XS mode -->\n\n        <li v-if=\"hasBots\" class=\"nav-item\">\n          <!-- Hide dropdown on xs, instead show below  -->\n          <b-nav-item-dropdown right class=\"d-none d-sm-block\">\n            <template #button-content>\n              <b-avatar size=\"2em\" button>FT</b-avatar>\n            </template>\n\n            <router-link\n              v-if=\"botCount === 1\"\n              class=\"dropdown-item\"\n              to=\"/\"\n              @click.native=\"clickLogout()\"\n              >Sign Out</router-link\n            >\n          </b-nav-item-dropdown>\n          <div class=\"d-block d-sm-none\">\n            <!-- Visible only on XS -->\n            <li class=\"nav-item text-secondary ml-2 d-sm-none d-flex justify-content-between\">\n              <div class=\"d-flex\">\n                <b-nav-text class=\"verticalCenter small mr-2\">\n                  {{ botName || 'No bot selected' }}\n                </b-nav-text>\n                <b-nav-text class=\"verticalCenter\">\n                  {{ isBotOnline ? 'Online' : 'Offline' }}\n                </b-nav-text>\n              </div>\n            </li>\n\n            <router-link\n              v-if=\"botCount === 1\"\n              class=\"nav-link navbar-nav\"\n              to=\"/\"\n              @click.native=\"clickLogout()\"\n              >Sign Out</router-link\n            >\n          </div>\n        </li>\n        <li v-else>\n          <!-- should open Modal window! -->\n          <LoginModal />\n        </li>\n      </b-navbar-nav>\n    </b-collapse>\n  </b-navbar>\n</header>\n","<template>\n  <footer class=\"d-md-none\">\n    <!-- Only visible on xs (phone) viewport! -->\n    <hr class=\"my-0\" />\n    <div class=\"d-flex flex-align-center justify-content-center\">\n      <router-link v-if=\"!canRunBacktest\" class=\"nav-link navbar-nav\" to=\"/open_trades\">\n        <OpenTradesIcon />\n        Trades\n      </router-link>\n      <router-link v-if=\"!canRunBacktest\" class=\"nav-link navbar-nav\" to=\"/trade_history\">\n        <ClosedTradesIcon />\n        History\n      </router-link>\n      <router-link v-if=\"!canRunBacktest\" class=\"nav-link navbar-nav\" to=\"/pairlist\">\n        <PairListIcon />\n        Pairlist\n      </router-link>\n      <router-link v-if=\"!canRunBacktest\" class=\"nav-link navbar-nav\" to=\"/balance\">\n        <BalanceIcon />\n        Balance\n      </router-link>\n      <router-link v-if=\"!canRunBacktest\" class=\"nav-link navbar-nav\" to=\"/dashboard\">\n        <DashboardIcon />\n        Dashboard\n      </router-link>\n    </div>\n  </footer>\n</template>\n\n<script lang=\"ts\">\nimport { Component, Vue } from 'vue-property-decorator';\nimport { namespace } from 'vuex-class';\nimport { BotStoreGetters } from '@/store/modules/ftbot';\nimport OpenTradesIcon from 'vue-material-design-icons/FolderOpen.vue';\nimport ClosedTradesIcon from 'vue-material-design-icons/FolderLock.vue';\nimport BalanceIcon from 'vue-material-design-icons/Bank.vue';\nimport PairListIcon from 'vue-material-design-icons/ViewList.vue';\nimport DashboardIcon from 'vue-material-design-icons/ViewDashboardOutline.vue';\n\nconst ftbot = namespace('ftbot');\n\n@Component({\n  components: { OpenTradesIcon, ClosedTradesIcon, BalanceIcon, PairListIcon, DashboardIcon },\n})\nexport default class NavFooter extends Vue {\n  @ftbot.Getter [BotStoreGetters.canRunBacktest]!: boolean;\n}\n</script>\n\n<style lang=\"scss\" scoped>\n[data-theme='dark'] {\n  .router-link-active,\n  .nav-link:active {\n    color: white !important;\n  }\n}\n</style>\n","\n<footer class=\"d-md-none\">\n  <!-- Only visible on xs (phone) viewport! -->\n  <hr class=\"my-0\" />\n  <div class=\"d-flex flex-align-center justify-content-center\">\n    <router-link v-if=\"!canRunBacktest\" class=\"nav-link navbar-nav\" to=\"/open_trades\">\n      <OpenTradesIcon />\n      Trades\n    </router-link>\n    <router-link v-if=\"!canRunBacktest\" class=\"nav-link navbar-nav\" to=\"/trade_history\">\n      <ClosedTradesIcon />\n      History\n    </router-link>\n    <router-link v-if=\"!canRunBacktest\" class=\"nav-link navbar-nav\" to=\"/pairlist\">\n      <PairListIcon />\n      Pairlist\n    </router-link>\n    <router-link v-if=\"!canRunBacktest\" class=\"nav-link navbar-nav\" to=\"/balance\">\n      <BalanceIcon />\n      Balance\n    </router-link>\n    <router-link v-if=\"!canRunBacktest\" class=\"nav-link navbar-nav\" to=\"/dashboard\">\n      <DashboardIcon />\n      Dashboard\n    </router-link>\n  </div>\n</footer>\n","<template>\n  <div class=\"bot-alerts\">\n    <b-alert\n      v-for=\"(alert, index) in activeMessages\"\n      :key=\"index\"\n      variant=\"warning\"\n      dismissible\n      :show=\"5\"\n      :value=\"!!alert.message\"\n      @dismissed=\"closeAlert\"\n    >\n      {{ alert.message }}\n    </b-alert>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Component, Vue } from 'vue-property-decorator';\nimport { namespace } from 'vuex-class';\nimport { AlertActions } from '@/store/modules/alerts';\nimport StoreModules from '@/store/storeSubModules';\nimport { AlertType } from '@/types/alertTypes';\n\nconst alerts = namespace(StoreModules.alerts);\n\n@Component({})\nexport default class BotAlerts extends Vue {\n  @alerts.State activeMessages!: AlertType[];\n\n  @alerts.Action [AlertActions.removeAlert];\n\n  closeAlert() {\n    this[AlertActions.removeAlert]();\n  }\n}\n</script>\n","\n<div class=\"bot-alerts\">\n  <b-alert\n    v-for=\"(alert, index) in activeMessages\"\n    :key=\"index\"\n    variant=\"warning\"\n    dismissible\n    :show=\"5\"\n    :value=\"!!alert.message\"\n    @dismissed=\"closeAlert\"\n  >\n    {{ alert.message }}\n  </b-alert>\n</div>\n","<template>\n  <main>\n    <BotAlerts />\n    <router-view />\n  </main>\n</template>\n\n<script lang=\"ts\">\nimport { Component, Vue } from 'vue-property-decorator';\nimport BotAlerts from '@/components/ftbot/BotAlerts.vue';\n\n@Component({\n  components: { BotAlerts },\n})\nexport default class Body extends Vue {}\n</script>\n<style lang=\"scss\" scoped>\n.container-main {\n  padding: 0;\n}\n</style>\n","\n<main>\n  <BotAlerts />\n  <router-view />\n</main>\n","<template>\n  <div id=\"app\" class=\"d-flex flex-column vh-100\">\n    <NavBar />\n    <Body class=\"flex-fill overflow-auto\" />\n    <NavFooter />\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Component, Vue } from 'vue-property-decorator';\nimport NavBar from '@/components/layout/NavBar.vue';\nimport NavFooter from '@/components/layout/NavFooter.vue';\nimport Body from '@/components/layout/Body.vue';\nimport { namespace } from 'vuex-class';\nimport { SettingsGetters } from './store/modules/settings';\nimport { setTimezone } from './shared/formatters';\nimport StoreModules from './store/storeSubModules';\n\nconst uiSettingsNs = namespace(StoreModules.uiSettings);\n\n@Component({\n  components: { NavBar, Body, NavFooter },\n})\nexport default class App extends Vue {\n  @uiSettingsNs.Getter [SettingsGetters.timezone]: string;\n\n  mounted() {\n    setTimezone(this.timezone);\n  }\n}\n</script>\n\n<style scoped>\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing:border-box;\n}\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n}\n\n/* * {\n  outline: 1px solid #f00 !important;\n} */\n</style>\n","\n<div id=\"app\" class=\"d-flex flex-column vh-100\">\n  <NavBar />\n  <Body class=\"flex-fill overflow-auto\" />\n  <NavFooter />\n</div>\n","<template>\n  <div class=\"home\">\n    <div class=\"container col-12 col-sm-6 col-lg-4\">\n      <bot-list />\n    </div>\n    <hr />\n    <img alt=\"Freqtrade logo\" src=\"../assets/Robot.png\" width=\"450px\" class=\"my-5\" />\n    <!--    <div alt=\"Freqtrade logo\" class=\"logo-svg my-5 mx-auto\" />-->\n    <div>\n      <h1 style=\"color: red;\">TuKorea Crypto currency trading bot</h1>\n    </div>\n    <div style=\"color: red;\">This page allows you to control your trading bot.</div>\n    <br />\n    <p style=\"color: red;\">\n      If you need any help, please visit our github.\n      <a href=\"https://github.com/Fractal-crypto\">Github</a>.\n    </p>\n\n    <p style=\"color: red;\">Have fun - <i>wishes you the Tukorea</i></p>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Component, Vue } from 'vue-property-decorator';\n\nimport BotList from '@/components/BotList.vue';\n\n@Component({\n  components: { BotList },\n})\nexport default class Home extends Vue {}\n</script>\n\n<style lang=\"scss\" scoped>\n.home {\n  margin-top: 1.5em;\n}\n.logo-svg {\n  -webkit-mask: url(../assets/freqtrade-logo-mask.png) no-repeat center;\n  -webkit-mask-size: 240px 240px;\n  mask: url(../assets/freqtrade-logo-mask.png) no-repeat center;\n  mask-size: contain;\n  width: 250px;\n  height: 250px;\n}\n</style>\n","export default \"__VITE_ASSET__5915a574__\"","\n<div class=\"home\">\n  <div class=\"container col-12 col-sm-6 col-lg-4\">\n    <bot-list />\n  </div>\n  <hr />\n  <img alt=\"Freqtrade logo\" src=\"../assets/Robot.png\" width=\"450px\" class=\"my-5\" />\n  <!--    <div alt=\"Freqtrade logo\" class=\"logo-svg my-5 mx-auto\" />-->\n  <div>\n    <h1 style=\"color: red;\">TuKorea Crypto currency trading bot</h1>\n  </div>\n  <div style=\"color: red;\">This page allows you to control your trading bot.</div>\n  <br />\n  <p style=\"color: red;\">\n    If you need any help, please visit our github.\n    <a href=\"https://github.com/Fractal-crypto\">Github</a>.\n  </p>\n\n  <p style=\"color: red;\">Have fun - <i>wishes you the Tukorea</i></p>\n</div>\n","\n<div>\n  <h1 class=\"mb-5\">404 Error.</h1>\n  <p class=\"h4\">Ahhhhhhhh! The page you are looking for does not exist.</p>\n  <p>\n    Don't worry, you can head back to\n    <router-link to=\"/\"> <span>the main page</span> </router-link>.\n  </p>\n</div>\n","// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\n//import { getAnalytics } from \"firebase/analytics\";\nimport { getAuth } from \"firebase/auth\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: \"AIzaSyClP5ZbPjlS_lhhiVrXY3Nqw7RS40EeA64\",\n  authDomain: \"new-trading-24f28.firebaseapp.com\",\n  projectId: \"new-trading-24f28\",\n  storageBucket: \"new-trading-24f28.appspot.com\",\n  messagingSenderId: \"59914060519\",\n  appId: \"1:59914060519:web:2459c52510ef3f5ac45842\",\n  measurementId: \"G-66LQ2W7R0E\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n//const analytics = getAnalytics(app);\nconst auth = getAuth(app);\n\nexport { auth }\n","import Vue from 'vue';\nimport VueRouter, { RouteConfig } from 'vue-router';\nimport Home from '@/views/Home.vue';\nimport Error404 from '@/views/Error404.vue';\nimport store from '@/store';\nimport StoreModules from '@/store/storeSubModules';\nimport { MultiBotStoreGetters } from '@/store/modules/botStoreWrapper';\nimport { auth } from '@/firebase'\nVue.use(VueRouter);\n\nconst routes: Array<RouteConfig> = [\n  {\n    path: '/',\n    name: 'Home',\n    component: Home,\n    meta: {\n      requiresAuth: true,\n      allowAnonymous: true,\n    },\n  },\n  {\n    path: '/trade',\n    name: 'Freqtrade Trading',\n    component: () => import('@/views/Trading.vue'),\n  },\n  {\n    path: '/login2',\n    name: 'Login2',\n    component: () => import('@/views/Logintest.vue')\n  },\n  {\n    path: '/per',\n    name: 'Freqtrade Per',\n    component: () => import('@/views/Per.vue'),\n  },\n  {\n    path: '/graph',\n    name: 'Freqtrade Graph',\n    component: () => import('@/views/Graphs.vue'),\n  },\n  {\n    path: '/logs',\n    name: 'Freqtrade Logs',\n    component: () => import('@/views/LogView.vue'),\n  },\n  {\n    path: '/backtest',\n    name: 'Freqtrade Backtest',\n    component: () => import('@/views/Backtesting.vue'),\n  },\n  {\n    path: '/dashboard',\n    name: 'Freqtrade Dashboard',\n    component: () => import('@/views/Dashboard.vue'),\n  },\n  {\n    path: '/balance',\n    name: 'Freqtrade Balance',\n    component: () => import('@/components/ftbot/Balance.vue'),\n  },\n  {\n    path: '/open_trades',\n    component: () => import('@/views/TradesList.vue'),\n  },\n\n  {\n    path: '/trade_history',\n    component: () => import('@/views/TradesList.vue'),\n    props: { history: true },\n  },\n  {\n    path: '/pairlist',\n    component: () => import('@/components/ftbot/FTBotAPIPairList.vue'),\n  },\n  {\n    path: '/settings',\n    name: 'Freqtrade Settings',\n    component: () => import('@/views/Settings.vue'),\n  },\n  {\n    path: '/login',\n    name: 'Login',\n    component: () => import('@/views/LoginView.vue'),\n    meta: {\n      allowAnonymous: true,\n    },\n  },\n  {\n    path: '*',\n    name: '404',\n    component: Error404,\n  },\n];\n\nconst router = new VueRouter({\n  mode: 'history',\n  base: import.meta.env.BASE_URL,\n  routes,\n});\n\nrouter.beforeEach((to, from, next) => {\n  const hasBots = store.getters[`${StoreModules.ftbot}/${MultiBotStoreGetters.hasBots}`];\n  if (!to.meta?.allowAnonymous && !hasBots) {\n    // Forward to login if login is required\n    next({\n      path: '/login',\n      query: { redirect: to.fullPath },\n    });\n  } else {\n    next();\n  }\n});\n\nrouter.beforeEach((to, from, next) => {\n  if (to.path === '/login2' && auth.currentUser) {\n    next('/')\n    return;\n  }\n\n  if (to.matched.some(record => record.meta.requiresAuth) && !auth.currentUser) {\n    next('login2')\n    return;\n  }\n\n  next();\n})\n\nexport default router;\n","import Vue from 'vue';\nimport Vuex from 'vuex';\nimport { createStore } from 'vuex'\n\nimport { getCurrentTheme, getTheme, storeCurrentTheme } from '@/shared/themes';\nimport axios from 'axios';\nimport { UserService } from '@/shared/userService';\nimport { UiVersion } from '@/types';\nimport StoreModules from '@/store/storeSubModules';\nimport createBotStore, { MultiBotStoreGetters } from './modules/botStoreWrapper';\nimport alertsModule from './modules/alerts';\nimport layoutModule from './modules/layout';\nimport settingsModule from './modules/settings';\nimport router from '@/router'\nimport { auth } from '@/firebase'\nimport {\n  createUserWithEmailAndPassword,\n  signInWithEmailAndPassword,\n  signOut\n} from 'firebase/auth'\n\nVue.use(Vuex);\nconst initCurrentTheme = getCurrentTheme();\n\nconst store = new Vuex.Store({\n  modules: {\n    [StoreModules.alerts]: alertsModule,\n    [StoreModules.layout]: layoutModule,\n    [StoreModules.uiSettings]: settingsModule,\n  },\n  state: {\n    user: null,\n    currentTheme: initCurrentTheme,\n    uiVersion: 'dev',\n  },\n  getters: {\n    isDarkTheme(state) {\n      const theme = getTheme(state.currentTheme);\n      if (theme) {\n        return theme.dark;\n      }\n      return true;\n    },\n    getChartTheme(state, getters) {\n      return getters.isDarkTheme ? 'dark' : 'light';\n    },\n    getUiVersion(state) {\n      return state.uiVersion;\n    },\n    loggedIn(state, getters) {\n      return getters[`${StoreModules.ftbot}/${MultiBotStoreGetters.hasBots}`];\n    },\n  },\n  mutations: {\n    SET_USER (state, user) {\n      state.user = user\n    },\n    CLEAR_USER (state) {\n      state.user = null\n    },\n    mutateCurrentTheme(state, newTheme: string) {\n      storeCurrentTheme(newTheme);\n      state.currentTheme = newTheme;\n    },\n    setUIVersion(state, uiVersion: string) {\n      state.uiVersion = uiVersion;\n    },\n  },\n  actions: {\n    async login ({ commit}, details) {\n      const { email, password } = details\n\n      try {\n        await signInWithEmailAndPassword(auth, email, password)\n\n\n      } catch (error) {\n        switch(error.code) {\n          case 'auth/user-not-found':\n            alert(\"user not found\")\n            break\n          case 'auth/wrong-password':\n            alert(\"wrong password\")\n            break\n          default:\n            alert(\"something go wrong\")\n        }\n\n        return\n      }\n      commit('SET_USER', auth.currentUser)\n\n      router.push('/')\n    },\n    async register ({ commit}, details) {\n      const { email, password } = details\n\n      try {\n        await createUserWithEmailAndPassword(auth, email, password)\n\n\n      } catch (error) {\n        switch(error.code) {\n          case 'auth/email-already-in-use':\n            alert(\"email-already-in-use'\")\n            break\n          case 'auth/invalid-email':\n            alert(\"invalid-email\")\n            break\n          case 'auth/operation-not-allowed':\n            alert(\"Operation not allowd\")\n            break\n          case 'auth/weak-password':\n            alert(\"week password\")\n            break\n          default:\n            alert(\"something go wron\")\n        }\n\n        return\n      }\n      commit('SET_USER', auth.currentUser)\n\n      router.push('/')\n    },\n    async logout ({commit}) {\n      await signOut(auth)\n\n      commit('CLEAR_USER')\n\n      router.push('/login')\n    },\n\n    fetchUser ({ commit }) {\n      auth.onAuthStateChanged(async user => {\n        if (user === null) {\n          commit('CLEAR_USER')\n\n        } else {\n          commit('SET_USER', user)\n\n          if (router.isReady() && router.currentRoute.value.path === '/login2') {\n            router.push('/')\n          }\n        }\n      })\n    },\n\n    setCurrentTheme({ commit }, newTheme: string) {\n      commit('mutateCurrentTheme', newTheme);\n    },\n\n    setLoggedIn({ commit }, loggedin: boolean) {\n      commit('setLoggedIn', loggedin);\n    },\n    async loadUIVersion({ commit }) {\n      if (import.meta.env.PROD) {\n        try {\n          const result = await axios.get<UiVersion>('/ui_version');\n          const { version } = result.data;\n\n          commit('setUIVersion', version);\n        } catch (error) {\n          //\n        }\n      }\n    },\n  },\n});\n\nUserService.migrateLogin();\n\nstore.registerModule(StoreModules.ftbot, createBotStore(store));\nObject.entries(UserService.getAvailableBots()).forEach(([, v]) => {\n  store.dispatch(`${StoreModules.ftbot}/addBot`, v);\n});\nstore.dispatch(`${StoreModules.ftbot}/selectFirstBot`);\nstore.dispatch(`${StoreModules.ftbot}/startRefresh`);\nexport default store;\n","import Vue from 'vue';\nimport './plugins/bootstrap-vue';\nimport './plugins/composition_api';\nimport App from './App.vue';\nimport store from './store';\nimport router from './router';\nimport { initApi } from './shared/apiService';\n\ninitApi(store);\n\nVue.config.productionTip = false;\n\nnew Vue({\n  store,\n  router,\n  render: (h) => h(App),\n}).$mount('#app');\n"],"names":["VueCompositionAPI","state","Login","render","staticRenderFns","LoginModal","utcToZonedTime","format","ReloadControl","BotList","NavBar","NavFooter","BotAlerts","Body","App","Home","store"],"mappings":"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"}